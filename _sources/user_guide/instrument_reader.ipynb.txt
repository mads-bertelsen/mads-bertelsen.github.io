{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "stretch-villa",
   "metadata": {},
   "source": [
    "# Instrument reader\n",
    "When McStasScript performs a McStas simulation, a traditional instrument file is generated and used for the simulation. In that way a user can easily go from a McStasScript instrument description to a regular instrument file. McStasScript does contain an instrument reader that can attempt to do the reverse, read a regular instrument file and create the McStasScript object or even a file with the python code that would create such an object. The [instrument reader](../_autosummary/mcstasscript.interface.reader.rst) contains the interface, but the system is not yet finished and can be somewhat unreliable. \n",
    "\n",
    "The instrument reader is a good way to transfer a project to McStasScript, but may require fixing of a few issues created in the transfer process."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "neutral-moore",
   "metadata": {},
   "source": [
    "## Create a reader object\n",
    "The first step is to create a reader object with [*McStas_file*](../_autosummary/mcstasscript.interface.reader.McStas_file.rst), this requires just a path to the instrument file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "alpine-yeast",
   "metadata": {},
   "outputs": [],
   "source": [
    "from mcstasscript.interface import instr, functions, plotter, reader"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "burning-romance",
   "metadata": {},
   "outputs": [],
   "source": [
    "instrument_reader = reader.McStas_file(\"data_example.instr\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "corporate-offer",
   "metadata": {},
   "source": [
    "## Create instrument object\n",
    "The [*McStas_file*](../_autosummary/mcstasscript.interface.reader.McStas_file.rst) object contains a method called *add_to_instr* that can add the instrument information to an [instrument](../_autosummary/mcstasscript.interface.instr.McCode_instr) object. Here a [McStas_instr](../_autosummary/mcstasscript.interface.instr.McStas_instr) object is initialized, and then the information to the instrument file is added with the instrument reader object."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "living-inflation",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "double wavelength  = 1.5  \n",
      "source Source_simple AT (0, 0, 0)   ABSOLUTE       \n",
      "sample PowderN       AT (0, 0, 5)   RELATIVE source\n",
      "banana Monitor_nD    AT (0, 0, 0)   RELATIVE sample\n",
      "PSD    PSD_monitor   AT (0, 0, 0.1) RELATIVE sample\n"
     ]
    }
   ],
   "source": [
    "instrument = instr.McStas_instr(\"reader_test\")\n",
    "instrument_reader.add_to_instr(instrument)\n",
    "\n",
    "instrument.show_parameters()\n",
    "instrument.print_components()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "modern-happiness",
   "metadata": {},
   "source": [
    "## Create a python script file\n",
    "It is also possible to get a script file from the [McStas_file](../_autosummary/mcstasscript.interface.reader.McStas_file.rst) object. A name for the script needs to be provided. The force keyword can be used to overwrite the file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "australian-possession",
   "metadata": {},
   "outputs": [],
   "source": [
    "instrument_reader.write_python_file(\"generated_python_script.py\", force=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "religious-lotus",
   "metadata": {},
   "source": [
    "The generated file is loaded and displayed to show that the python script is of reasonable quality, but still has room for improvement. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "operational-earthquake",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\"\"\"\n",
      "This McStasScript file was generated from a\n",
      "McStas instrument file. It is advised to check\n",
      "the content to ensure it is as expected.\n",
      "\"\"\"\n",
      "from mcstasscript.interface import instr, plotter, functions\n",
      "\n",
      "data_example = instr.McStas_instr(\"data_example_generated\")\n",
      "data_example.add_parameter(\"double\", \"wavelength\", value=1.5)\n",
      "\n",
      "source = data_example.add_component(\"source\", \"Source_simple\")\n",
      "source.yheight = 0.03\n",
      "source.xwidth = 0.05\n",
      "source.dist = 5\n",
      "source.focus_xw = 0.015\n",
      "source.focus_yh = 0.03\n",
      "source.lambda0 = \"wavelength\"\n",
      "source.dlambda = 0.02\n",
      "source.set_AT(['0', '0', '0'], RELATIVE=\"ABSOLUTE\")\n",
      "\n",
      "sample = data_example.add_component(\"sample\", \"PowderN\")\n",
      "sample.reflections = \"\\\"Na2Ca3Al2F14.laz\\\"\"\n",
      "sample.radius = 0.015\n",
      "sample.yheight = 0.024\n",
      "sample.set_AT(['0', '0', '5'], RELATIVE=\"source\")\n",
      "\n",
      "banana = data_example.add_component(\"banana\", \"Monitor_nD\")\n",
      "banana.xwidth = 1.5\n",
      "banana.yheight = 0.4\n",
      "banana.restore_neutron = 1\n",
      "banana.options = \"\\\"theta limits=[5 175] bins=250, banana\\\"\"\n",
      "banana.filename = \"\\\"banana.dat\\\"\"\n",
      "banana.set_AT(['0', '0', '0'], RELATIVE=\"sample\")\n",
      "\n",
      "PSD = data_example.add_component(\"PSD\", \"PSD_monitor\")\n",
      "PSD.nx = 100\n",
      "PSD.ny = 100\n",
      "PSD.filename = \"\\\"psd.dat\\\"\"\n",
      "PSD.xwidth = 0.075\n",
      "PSD.yheight = 0.048\n",
      "PSD.restore_neutron = 1\n",
      "PSD.set_AT(['0', '0', '0.1'], RELATIVE=\"sample\")\n",
      "\n"
     ]
    }
   ],
   "source": [
    "with open(\"generated_python_script.py\") as file:\n",
    "    script = file.read()\n",
    "print(script)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "expected-lambda",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
