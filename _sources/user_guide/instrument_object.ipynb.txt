{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "important-midwest",
   "metadata": {},
   "source": [
    "# Instrument object\n",
    "This section shows the majority of the features implemented for the instrument object in McStasScript."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eastern-distance",
   "metadata": {},
   "source": [
    "## Initialization\n",
    "An instrument object is created with the [McStas_instr](../_autosummary/mcstasscript.interface.instr.McStas_instr.rst) or [McXtrace_instr](../_autosummary/mcstasscript.interface.instr.McXtrace_instr.rst) class in the instr module. When an instrument object is created the only required argument is the name of the instrument which will be used for the instrument filename. There are however a number of keyword arguments that can be used to provide more information and alter the behavior.\n",
    "\n",
    "| Keyword argument | Type | Default | Description |\n",
    "| --- | --- | --- | --- |\n",
    "| author | str |\"Python Instrument Generator\" | Name that will appear as author in instrument files |\n",
    "| origin | str |\"ESS DMSC\" | String that will appear as origin in instrument files |\n",
    "| input_path | str | \".\" | Folder which is considered workspace for McStas / McXtrace |\n",
    "| output_path | str | instrument_name | Name of data folder written by simulation |\n",
    "| package_path | str | | Can be set to manually specify location of McStas/McXtrace installation |\n",
    "| executable_path | str |  | Can be set to manually specify location of mcrun/mxrun executable |\n",
    "| ncount | int, float | 1E6 | Sets the ncount used for simulations |\n",
    "| mpi | int |  | Sets the number of MPI threads used for simulations |\n",
    "| force_compile | bool | True | Whether to force compilation before each run or not |\n",
    "| parameters | ParameterContainer |  | Set of parameters for initialized instrument |"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "liable-newton",
   "metadata": {},
   "outputs": [],
   "source": [
    "from mcstasscript.interface import instr, functions, plotter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "experienced-locator",
   "metadata": {},
   "outputs": [],
   "source": [
    "instrument = instr.McStas_instr(\"instr_name\", author=\"Mads Bertelsen\", origin=\"DMSC\")\n",
    "instrument_w_settings = instr.McStas_instr(\"instr_name\", ncount=3E6, output_path=\"new_folder\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "universal-saudi",
   "metadata": {},
   "source": [
    "### Using settings method\n",
    "The instrument object has a *setting* method which can update some settings after initialization. The current settings can always be viewed with *show_settings*.\n",
    "\n",
    "| Keyword argument | Type | Default | Description |\n",
    "| --- | --- | --- | --- |\n",
    "| output_path | str | instrument_name | Name of data folder written by simulation |\n",
    "| package_path | str | | Can be set to manually specify location of McStas/McXtrace installation |\n",
    "| executable_path | str |  | Can be set to manually specify location of mcrun/mxrun executable |\n",
    "| ncount | int, float | 1E6 | Sets the ncount used for simulations |\n",
    "| mpi | int |  | Sets the number of MPI threads used for simulations |\n",
    "| seed |  |  | Sets the seed of the simulation |\n",
    "| force_compile | bool | True | Whether to force compilation before each run or not |\n",
    "| custom_flags | str |  | String with custom flags for mcrun/mxrun command |"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "sapphire-pasta",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Instrument settings:\n",
      "  output_path:      instr_name_data\n",
      "  run_path:         .\n",
      "  package_path:     /Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1\n",
      "  executable_path:  /Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1/bin/\n",
      "  executable:       mcrun\n",
      "  force_compile:    True\n",
      "Instrument settings:\n",
      "  ncount:           3.00e+06\n",
      "  output_path:      new_folder\n",
      "  run_path:         .\n",
      "  package_path:     /Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1\n",
      "  executable_path:  /Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1/bin/\n",
      "  executable:       mcrun\n",
      "  force_compile:    True\n"
     ]
    }
   ],
   "source": [
    "instrument.show_settings()\n",
    "instrument_w_settings.show_settings()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "assumed-boundary",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Instrument settings:\n",
      "  mpi:              4\n",
      "  seed:             300\n",
      "  output_path:      instr_name_data\n",
      "  run_path:         .\n",
      "  package_path:     /Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1\n",
      "  executable_path:  /Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1/bin/\n",
      "  executable:       mcrun\n",
      "  force_compile:    True\n"
     ]
    }
   ],
   "source": [
    "instrument.settings(mpi=4, seed=300)\n",
    "instrument.show_settings()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "unsigned-ideal",
   "metadata": {},
   "source": [
    "## Parameters\n",
    "Instrument parameters can be added with *add_parameters* which returns a parameter object."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "signed-distributor",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Parameter named: 'wavelength' without set value.\n",
      " Wavelength in AA\n",
      "\n",
      "Parameter named: 'wavelength' with value: 5\n",
      " Wavelength in AA\n",
      "\n"
     ]
    }
   ],
   "source": [
    "wavelength = instrument.add_parameter(\"wavelength\", comment=\"Wavelength in AA\")\n",
    "print(wavelength)\n",
    "wavelength.value = 5\n",
    "print(wavelength)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fourth-glasgow",
   "metadata": {},
   "source": [
    "## Initialize section\n",
    "One of the great advantages for the McStas / McXtrace packages is the initialize section of the instrument where calculations can be performed before the ray-tracing simulation starts. One could for example calculate appropriate angles to reach a certain Bragg peak at a given wavelength. This would involve defining some declare variables, using these in the initialize section and then assigning them as component inputs.\n",
    "\n",
    "In McStasScript many calculations can be performed directly in Python, and so typically the initialize section is used less, but it is still useful and available through McStasScript.\n",
    "\n",
    "The instrument object has the method *append_initialize* which adds a line of code to the initialize. This line is copied directly into the instrument file, so it follows C syntax. Remember the semicolon! In addition there is *add_declare_var* to specify the declared variables needed. When declare variables are defined an object is returned which can be used when referring to that variable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "spare-button",
   "metadata": {},
   "outputs": [],
   "source": [
    "wavenumber = instrument.add_declare_var(\"double\", \"wavenumber\")\n",
    "instrument.append_initialize(\"wavenumber = 2*PI/wavelength;\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "twelve-tuition",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "// Start of initialize for generated instr_name\n",
      "wavenumber = 2*PI/wavelength;\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(instrument.initialize_section)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "occupational-budget",
   "metadata": {},
   "source": [
    "## Finally section\n",
    "The finally section works exactly as the initialize section, but is executed after the ray-tracing simulation. Add a line to it with *append_finally*."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "cultural-workplace",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "// Start of finally for generated instr_name\n",
      "printf(\"Thanks for using McStasScript!\\n\");\n",
      "\n"
     ]
    }
   ],
   "source": [
    "instrument.append_finally('printf(\\\"Thanks for using McStasScript!\\\\n\\\");')\n",
    "print(instrument.finally_section)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "threaded-double",
   "metadata": {},
   "source": [
    "## Help features\n",
    "There are a few methods built into the instrument class that helps the user, these are:\n",
    "\n",
    "- *show_components*\n",
    "- *component_help*\n",
    "\n",
    "### show_components\n",
    "The *show_components* method shows the component categories, and if called with the name of a category, will show all components in the specified category. The categories can include the work directory if any components are located there."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "foreign-chosen",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Here are the available component categories:\n",
      " contrib\n",
      " misc\n",
      " monitors\n",
      " obsolete\n",
      " optics\n",
      " samples\n",
      " sources\n",
      " union\n",
      "Call show_components(category_name) to display\n"
     ]
    }
   ],
   "source": [
    "instrument.show_components()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "regulated-hollywood",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Here are all components in the optics category.\n",
      " Absorber                 Guide_gravity          Pol_bender\n",
      " Arm                      Guide_simple           Pol_constBfield\n",
      " Beamstop                 Guide_tapering         Pol_guide_mirror\n",
      " Bender                   Guide_wavy             Pol_guide_vmirror\n",
      " Collimator_linear        He3_cell               Pol_mirror\n",
      " Collimator_radial        Mask                   Refractor\n",
      " Derotator                Mirror                 Rotator\n",
      " Diaphragm                Monochromator_curved   Selector\n",
      " DiskChopper              Monochromator_flat     Set_pol\n",
      " Elliptic_guide_gravity   Monochromator_pol      Slit\n",
      " FermiChopper             PolAnalyser_ideal      V_selector\n",
      " Filter_gen               Pol_Bfield             Virtual_mcnp_ss_Guide\n",
      " Guide                    Pol_Bfield_stop        Vitess_ChopperFermi\n",
      " Guide_anyshape           Pol_FieldBox           \n",
      " Guide_channeled          Pol_SF_ideal           \n"
     ]
    }
   ],
   "source": [
    "instrument.show_components(\"optics\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ultimate-junction",
   "metadata": {},
   "source": [
    "### component_help\n",
    "The *component_help* method can show the parameters of any component the instrument object knows about, although not necessarily used in the instrument."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "dominican-dubai",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " ___ Help Guide _____________________________________________________________________\n",
      "|\u001b[1moptional parameter\u001b[0m|\u001b[1m\u001b[4mrequired parameter\u001b[0m\u001b[0m|\u001b[1m\u001b[94mdefault value\u001b[0m\u001b[0m|\u001b[1m\u001b[92muser specified value\u001b[0m\u001b[0m|\n",
      "\u001b[1mreflect\u001b[0m = \u001b[1m\u001b[94m0\u001b[0m\u001b[0m [str] // Reflectivity file name. Format <q(Angs-1) R(0-1)>\n",
      "\u001b[4m\u001b[1mw1\u001b[0m\u001b[0m [m] // Width at the guide entry\n",
      "\u001b[4m\u001b[1mh1\u001b[0m\u001b[0m [m] // Height at the guide entry\n",
      "\u001b[1mw2\u001b[0m = \u001b[1m\u001b[94m0.0\u001b[0m\u001b[0m [m] // Width at the guide exit\n",
      "\u001b[1mh2\u001b[0m = \u001b[1m\u001b[94m0.0\u001b[0m\u001b[0m [m] // Height at the guide exit\n",
      "\u001b[4m\u001b[1ml\u001b[0m\u001b[0m [m] // length of guide\n",
      "\u001b[1mR0\u001b[0m = \u001b[1m\u001b[94m0.99\u001b[0m\u001b[0m [1] // Low-angle reflectivity\n",
      "\u001b[1mQc\u001b[0m = \u001b[1m\u001b[94m0.0219\u001b[0m\u001b[0m [AA-1] // Critical scattering vector\n",
      "\u001b[1malpha\u001b[0m = \u001b[1m\u001b[94m6.07\u001b[0m\u001b[0m [AA] // Slope of reflectivity\n",
      "\u001b[1mm\u001b[0m = \u001b[1m\u001b[94m2.0\u001b[0m\u001b[0m [1] // m-value of material. Zero means completely absorbing. glass/SiO2 \n",
      "               Si Ni Ni58 supermirror Be Diamond m=  0.65 0.47 1 1.18 2-6 1.01 1.12 \n",
      "\u001b[1mW\u001b[0m = \u001b[1m\u001b[94m0.003\u001b[0m\u001b[0m [AA-1] // Width of supermirror cut-off\n",
      "-------------------------------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "instrument.component_help(\"Guide\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "studied-victorian",
   "metadata": {},
   "source": [
    "## Adding components\n",
    "One adds components to the instrument using *add_component* which takes the name of the component instance for the instrument, followed by the name of the component in the library. When adding a component, a [component](../_autosummary/mcstasscript.helper.mcstas_objects.Component.rst) object is returned, and how these can be manipulated is discussed on the [component object page](component_object.ipynb). Notice that it is not allowed to add two components with the same instance name, meaning rerunning this cell would raise an exception. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "literary-nirvana",
   "metadata": {},
   "outputs": [],
   "source": [
    "source = instrument.add_component(\"source\", \"Source_div\")\n",
    "source.set_parameters(xwidth=0.1, yheight=0.1, focus_aw=3.0, focus_ah=2.0, \n",
    "                      lambda0=wavelength, dlambda=\"0.1*wavelength\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "loving-raleigh",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "COMPONENT source = Source_div\n",
      "  \u001b[1mxwidth\u001b[0m = \u001b[1m\u001b[92m0.1\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1myheight\u001b[0m = \u001b[1m\u001b[92m0.1\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1mfocus_aw\u001b[0m = \u001b[1m\u001b[92m3.0\u001b[0m\u001b[0m [deg]\n",
      "  \u001b[1mfocus_ah\u001b[0m = \u001b[1m\u001b[92m2.0\u001b[0m\u001b[0m [deg]\n",
      "  \u001b[1mlambda0\u001b[0m = \u001b[1m\u001b[92mwavelength\u001b[0m\u001b[0m [Ang]\n",
      "  \u001b[1mdlambda\u001b[0m = \u001b[1m\u001b[92m0.1*wavelength\u001b[0m\u001b[0m [Ang]\n",
      "AT [0, 0, 0] ABSOLUTE\n"
     ]
    }
   ],
   "source": [
    "print(source)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "unnecessary-helen",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "source Source_div AT (0, 0, 0) ABSOLUTE\n"
     ]
    }
   ],
   "source": [
    "instrument.print_components()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "outdoor-motor",
   "metadata": {},
   "source": [
    "There are a number of keyword arguments allowed when adding a component. These will mainly be discussed on the [component object page](component_object.ipynb), but a few are relevant for the instrument, because the handle in what order components are sequenced in the instrument. To illustrate this we add a slit and a guide to the instrument at reasonable positions. Notice these new components are added at the end of the instrument."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "informative-council",
   "metadata": {},
   "outputs": [],
   "source": [
    "slit = instrument.add_component(\"source_slit\", \"Slit\", AT=2, RELATIVE=source)\n",
    "slit.set_parameters(xwidth=0.015, yheight=0.015)\n",
    "\n",
    "guide = instrument.add_component(\"guide\", \"Guide\", AT=0.1, RELATIVE=slit)\n",
    "guide.set_parameters(w1=0.03, h1=0.03, l=10.0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "moral-apartment",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "source      Source_div AT      (0, 0, 0)   ABSOLUTE            \n",
      "source_slit Slit       AT      (0, 0, 2)   RELATIVE source     \n",
      "guide       Guide      AT      (0, 0, 0.1) RELATIVE source_slit\n"
     ]
    }
   ],
   "source": [
    "instrument.print_components()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "least-circulation",
   "metadata": {},
   "source": [
    "The order of components is important in a McStas/McXtrace simulation as each will affect the ray state in the sequence shown with *print_components*. If one wants to add a component between the source and the slit, this can be done with the *before* or *after* keyword."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "absent-pizza",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "source      Source_div  AT      (0, 0, 0)   ABSOLUTE            \n",
      "PSD         PSD_monitor AT      (0, 0, 1.9) RELATIVE source     \n",
      "source_slit Slit        AT      (0, 0, 2)   RELATIVE source     \n",
      "guide       Guide       AT      (0, 0, 0.1) RELATIVE source_slit\n"
     ]
    }
   ],
   "source": [
    "monitor = instrument.add_component(\"PSD\", \"PSD_monitor\", after=\"source\")\n",
    "monitor.set_AT(1.9, RELATIVE=source)\n",
    "monitor.set_parameters(xwidth=0.1, yheight=0.1, filename='\"PSD.dat\"')\n",
    "\n",
    "instrument.print_components()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "municipal-prior",
   "metadata": {},
   "source": [
    "The PSD monitor was inserted after the source, this could also be accomplished with the before keyword argument.\n",
    "```\n",
    "before=\"source_slit\"\n",
    "```\n",
    "It is important to note that the McStas instrument file is read sequentially, so the position of the PSD monitor can not be relative to a later component, but must only refer to earlier components. At this point in development it is not possible to reorder components in the instrument object."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "distinct-thousand",
   "metadata": {},
   "source": [
    "## Making a component copy\n",
    "It is possible to copy an existing component using the *copy_component* method. This can reduce both the amount of typing necessary, but also the risk of making a mistake. Here the guide is copied and placed a bit after the end of the first guide, with a small rotation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "figured-electronics",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "COMPONENT guide_2 = Guide\n",
      "  \u001b[1mw1\u001b[0m = \u001b[1m\u001b[92m0.03\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1mh1\u001b[0m = \u001b[1m\u001b[92m0.03\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1ml\u001b[0m = \u001b[1m\u001b[92m10.0\u001b[0m\u001b[0m [m]\n",
      "AT [0, 0, 10.01] RELATIVE guide\n",
      "ROTATED [0, 0.5, 0] RELATIVE guide\n"
     ]
    }
   ],
   "source": [
    "guide2 = instrument.copy_component(\"guide_2\", \"guide\")\n",
    "guide2.set_AT(guide.l + 0.01, RELATIVE=guide)\n",
    "guide2.set_ROTATED([0, 0.5, 0], RELATIVE=guide)\n",
    "print(guide2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "parental-theme",
   "metadata": {},
   "source": [
    "## Getting components"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "hidden-shopping",
   "metadata": {},
   "source": [
    "It is always possible to retrieve the component objects corresponding to components in the instrument with the *get_component* and *get_last_component* methods."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "military-biotechnology",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "COMPONENT source = Source_div\n",
      "  \u001b[1mxwidth\u001b[0m = \u001b[1m\u001b[92m0.1\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1myheight\u001b[0m = \u001b[1m\u001b[92m0.1\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1mfocus_aw\u001b[0m = \u001b[1m\u001b[92m3.0\u001b[0m\u001b[0m [deg]\n",
      "  \u001b[1mfocus_ah\u001b[0m = \u001b[1m\u001b[92m2.0\u001b[0m\u001b[0m [deg]\n",
      "  \u001b[1mlambda0\u001b[0m = \u001b[1m\u001b[92mwavelength\u001b[0m\u001b[0m [Ang]\n",
      "  \u001b[1mdlambda\u001b[0m = \u001b[1m\u001b[92m0.1*wavelength\u001b[0m\u001b[0m [Ang]\n",
      "AT [0, 0, 0] ABSOLUTE\n"
     ]
    }
   ],
   "source": [
    "my_source = instrument.get_component(\"source\")\n",
    "print(my_source)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "ambient-naples",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "COMPONENT guide_2 = Guide\n",
      "  \u001b[1mw1\u001b[0m = \u001b[1m\u001b[92m0.03\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1mh1\u001b[0m = \u001b[1m\u001b[92m0.03\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1ml\u001b[0m = \u001b[1m\u001b[92m10.0\u001b[0m\u001b[0m [m]\n",
      "AT [0, 0, 10.01] RELATIVE guide\n",
      "ROTATED [0, 0.5, 0] RELATIVE guide\n"
     ]
    }
   ],
   "source": [
    "last_component = instrument.get_last_component()\n",
    "print(last_component)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cardiovascular-hughes",
   "metadata": {},
   "source": [
    "## Run the simulation\n",
    "The simulation is executed with a call to the *backengine* method, which will return the generated data. If the simulation fails, the method returns None."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "intense-chapter",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO: Using directory: \"/Users/madsbertelsen/PaNOSC/McStasScript/github/McStasScript/docs/source/user_guide/instr_name_data_23\"\n",
      "INFO: Regenerating c-file: instr_name.c\n",
      "CFLAGS=\n",
      "INFO: Recompiling: ./instr_name.out\n",
      "mccode-r.c:1880:1: warning: non-void function does not return a value in all control paths [-Wreturn-type]\n",
      "} /* mcsiminfo_init */\n",
      "^\n",
      "mccode-r.c:2837:3: warning: expression result unused [-Wunused-value]\n",
      "  *t0;\n",
      "  ^~~\n",
      "2 warnings generated.\n",
      "INFO: ===\n",
      "INFO: Placing instr file copy instr_name.instr in dataset /Users/madsbertelsen/PaNOSC/McStasScript/github/McStasScript/docs/source/user_guide/instr_name_data_23\n",
      "\n",
      "Simulation 'instr_name' (instr_name.instr): running on 4 nodes (master is 'CI0021617', MPI version 3.1).\n",
      "Detector: PSD_I=0.114429 PSD_ERR=0.000144614 PSD_N=626113 \"PSD.dat\"\n",
      "Thanks for using McStasScript!\n",
      "Thanks for using McStasScript!\n",
      "Thanks for using McStasScript!\n",
      "Thanks for using McStasScript!\n",
      "loading system configuration\n",
      "\n"
     ]
    }
   ],
   "source": [
    "data = instrument.backengine()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "honey-conference",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[\n",
      "McStasData: PSD type: 2D  I:0.114429 E:0.000144614 N:626113]\n"
     ]
    }
   ],
   "source": [
    "print(data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "varying-clearing",
   "metadata": {},
   "source": [
    "## Visualizing the instrument\n",
    "It is possible to visualize the instrument using the visualization features in McStas / McXtrace. If done in a Jupyter Notebook, the visualization can be viewed in the notebook. The *show_instrument* method is used, and one can choose the format with the keyword *format* which can be either \"window\" or \"webgl\". When using window format a new window is opened with 2D visualization, and with the webgl format a 3D viewer is opened in a new browser tab. Be aware that the parameters set for the instrument is used for the visualization."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "headed-simulation",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "loading system configuration\n",
      "\n",
      "INFO: Using directory: \"instr_name_mcdisplay\"\n",
      "INFO: Regenerating c-file: instr_name.c\n",
      "CFLAGS=\n",
      "INFO: Recompiling: ./instr_name.out\n",
      "mccode-r.c:2837:3: warning: expression result unused [-Wunused-value]\n",
      "*t0;\n",
      "^~~\n",
      "1 warning generated.\n",
      "INFO: ===\n",
      "instrument definition parsed\n",
      "reading particle data...\n",
      "\n",
      "Component                         source AT (0,0,0)    0 m from origin\n",
      "Component                            PSD AT (0,0,1.9)    1.9 m from origin\n",
      "Component                    source_slit AT (0,0,2)    2 m from origin\n",
      "Component                          guide AT (0,0,2.1)    2.1 m from origin\n",
      "Component                        guide_2 AT (0,0,12.11)    12.11 m from origin\n",
      "Detector: PSD_I=0.116358 PSD_ERR=0.00841937 PSD_N=191 \"PSD.dat\"\n",
      "Thanks for using McStasScript!\n",
      "loading system configuration\n",
      "\n",
      "starting particle parsing\n",
      "ended particle parsing\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <iframe\n",
       "            width=\"800\"\n",
       "            height=\"450\"\n",
       "            src=\"./instr_name_mcdisplay/index.html\"\n",
       "            frameborder=\"0\"\n",
       "            allowfullscreen\n",
       "        ></iframe>\n",
       "        "
      ],
      "text/plain": [
       "<IPython.lib.display.IFrame at 0x7f91502c15b0>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "instrument.show_instrument()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "italic-madagascar",
   "metadata": {
    "tags": [
     "hide-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1/bin/../tools/Python/mcdisplay/pyqtgraph/mcdisplay.py:292: DeprecationWarning: GraphicsWindow is deprecated, use GraphicsLayoutWidget instead,will be removed in 0.13\n",
      "  window = pg.GraphicsWindow()\n",
      "\n",
      "loading system configuration\n",
      "\n",
      "INFO: Using directory: \"instr_name_mcdisplay_0\"\n",
      "INFO: Regenerating c-file: instr_name.c\n",
      "CFLAGS=\n",
      "INFO: Recompiling: ./instr_name.out\n",
      "mccode-r.c:2837:3: warning: expression result unused [-Wunused-value]\n",
      "*t0;\n",
      "^~~\n",
      "1 warning generated.\n",
      "INFO: ===\n",
      "instrument definition parsed\n",
      "reading particle data...\n",
      "\n",
      "Component                         source AT (0,0,0)    0 m from origin\n",
      "Component                            PSD AT (0,0,1.9)    1.9 m from origin\n",
      "Component                    source_slit AT (0,0,2)    2 m from origin\n",
      "Component                          guide AT (0,0,2.1)    2.1 m from origin\n",
      "Component                        guide_2 AT (0,0,12.11)    12.11 m from origin\n",
      "Detector: PSD_I=0.127933 PSD_ERR=0.0152909 PSD_N=70 \"PSD.dat\"\n",
      "Thanks for using McStasScript!\n",
      "loading system configuration\n",
      "\n",
      "starting particle parsing\n",
      "ended particle parsing\n",
      "\n",
      "q            - quit\n",
      "p            - save png\n",
      "s            - save svg\n",
      "space        - next ray\n",
      "click        - enter subplot\n",
      "right-click  - exit subplot\n",
      "h/F1         - show component list\n",
      "\n",
      "q            - quit\n",
      "p            - save png\n",
      "s            - save svg\n",
      "space        - next ray\n",
      "click        - enter subplot\n",
      "right-click  - exit subplot\n",
      "h/F1         - show component list\n",
      "wrapped C/C++ object of type ScatterPlotItem has been deleted\n",
      "\n"
     ]
    }
   ],
   "source": [
    "instrument.show_instrument(format=\"window\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "common-clause",
   "metadata": {},
   "source": [
    "When using the 3D view, use these controls to manipulate the view:\n",
    "\n",
    "| Action | Effect on view |\n",
    "| --- | --- |\n",
    "| Hold left click and drag | Rotate |\n",
    "| Hold right click and drag | Move |\n",
    "| Hold mouse wheel and drag up/down | Zoom in/out |\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dressed-branch",
   "metadata": {},
   "source": [
    "## Dump and load an instrument object\n",
    "It is possible to save an instrument object to disk and load it later. For now the name is still a required parameter, but it is overwritten by the loading process."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "casual-blame",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'dump_file_name.dmp'"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "instrument.dump(\"dump_file_name.dmp\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "advance-soldier",
   "metadata": {},
   "outputs": [],
   "source": [
    "loaded_instrument = instr.McStas_instr(\"\", dumpfile=\"dump_file_name.dmp\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "european-pepper",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "source      Source_div  AT      (0, 0, 0)     ABSOLUTE            \n",
      "PSD         PSD_monitor AT      (0, 0, 1.9)   RELATIVE source     \n",
      "source_slit Slit        AT      (0, 0, 2)     RELATIVE source     \n",
      "guide       Guide       AT      (0, 0, 0.1)   RELATIVE source_slit\n",
      "guide_2     Guide       AT      (0, 0, 10.01) RELATIVE guide       \n",
      "                        ROTATED (0, 0.5, 0)   RELATIVE guide\n",
      "Instrument settings:\n",
      "  output_path:      instr_name_data\n",
      "  run_path:         .\n",
      "  package_path:     /Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1\n",
      "  executable_path:  /Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1/bin/\n",
      "  executable:       mcrun\n",
      "  force_compile:    True\n"
     ]
    }
   ],
   "source": [
    "loaded_instrument.print_components()\n",
    "loaded_instrument.show_settings()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "independent-blend",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "celltoolbar": "Tags",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  },
  "metadata": {
   "execution": {
    "timeout": 100
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
