{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "violent-naples",
   "metadata": {},
   "source": [
    "# Data\n",
    "Data from simulations performed by McStasScript is returned as [McStasData](../_autosummary/mcstasscript.data.data.McStasData.rst) objects. This section will explore what these contain and how one can manipulate them. First a small instrument is written that will supply data to investigate.\n",
    "\n",
    "## Example instrument\n",
    "The instrument will consist of a source, a powder sample and some monitors that will record data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ordered-execution",
   "metadata": {
    "tags": [
     "hide-input"
    ]
   },
   "outputs": [],
   "source": [
    "from mcstasscript.interface import instr, functions, plotter\n",
    "\n",
    "instrument = instr.McStas_instr(\"data_example\")\n",
    "\n",
    "source = instrument.add_component(\"source\", \"Source_simple\")\n",
    "source.set_parameters(xwidth=0.05, yheight=0.03, dlambda=0.1,\n",
    "                      dist=5, focus_xw=0.015, focus_yh=0.03)\n",
    "source.lambda0 = instrument.add_parameter(\"wavelength\", value=1.2)\n",
    "\n",
    "sample = instrument.add_component(\"sample\", \"PowderN\")\n",
    "sample.set_parameters(radius=source.focus_xw, yheight=source.focus_yh,\n",
    "                      reflections='\"Na2Ca3Al2F14.laz\"', barns=0)\n",
    "sample.set_AT(source.dist, RELATIVE=source)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "polar-second",
   "metadata": {},
   "source": [
    "### Example monitors\n",
    "Here three monitors are defined, a 2D PSD monitor, a 1D banana monitor and an event monitor. Monitor_nD is used for the last two, where the option string describes the geometry and what is to be recorded."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "veterinary-section",
   "metadata": {},
   "outputs": [],
   "source": [
    "banana = instrument.add_component(\"banana\", \"Monitor_nD\", RELATIVE=sample)\n",
    "banana.set_parameters(xwidth=1.5, yheight=0.4, restore_neutron=1, filename='\"banana.dat\"')\n",
    "banana.options = '\"theta limits=[5 175] bins=250, banana\"'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "grand-pilot",
   "metadata": {},
   "outputs": [],
   "source": [
    "event = instrument.add_component(\"events\", \"Monitor_nD\", RELATIVE=sample)\n",
    "event.set_parameters(xwidth=0.5, yheight=0.5, restore_neutron=1, filename='\"events.dat\"')\n",
    "event.options = '\"list all auto, x y z vx vy vz t\"'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "fiscal-tooth",
   "metadata": {},
   "outputs": [],
   "source": [
    "mon = instrument.add_component(\"PSD\", \"PSD_monitor\")\n",
    "mon.set_AT(0.1, RELATIVE=sample)\n",
    "mon.set_parameters(nx=100, ny=100, filename='\"psd.dat\"',\n",
    "                   xwidth=3*sample.radius, yheight=2*sample.yheight, restore_neutron=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "latin-cuisine",
   "metadata": {},
   "source": [
    "### Performing the simulation\n",
    "The simulation is executed using the *backengine* method with a low number of neutrons."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "monetary-arcade",
   "metadata": {
    "scrolled": true,
    "tags": [
     "scroll-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO: Using directory: \"/Users/madsbertelsen/PaNOSC/McStasScript/github/McStasScript/docs/source/user_guide/data_example_15\"\n",
      "INFO: Regenerating c-file: data_example.c\n",
      "CFLAGS=\n",
      "INFO: Recompiling: ./data_example.out\n",
      "mccode-r.c:2837:3: warning: expression result unused [-Wunused-value]\n",
      "  *t0;\n",
      "  ^~~\n",
      "1 warning generated.\n",
      "INFO: ===\n",
      "Warning: 2991 events were removed in Component[5] PSD=PSD_monitor()\n",
      "         (negative time, miss next components, rounding errors, Nan, Inf).\n",
      "INFO: Placing instr file copy data_example.instr in dataset /Users/madsbertelsen/PaNOSC/McStasScript/github/McStasScript/docs/source/user_guide/data_example_15\n",
      "\n",
      "      Opening input file '/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//data/YBaCuO.lau' (Table_Read_Offset)\n",
      "Table from file 'YBaCuO.lau' (block 1) is 62 x 7 (x=-1:1), constant step. interpolation: linear\n",
      "  '# TITLE *YBa2Cu3O7 yttrium barium cuprate;# SPCGRP Pmmm   orthorhombic (per ...'\n",
      "PowderN: sample: Reading 62 rows from YBaCuO.lau\n",
      "PowderN: sample: Set multiplicity to 1 for lines [0:1]\n",
      "         (d-spacing 0.53805 is duplicated 2 times)\n",
      "PowderN: sample: Set multiplicity to 1 for lines [2:3]\n",
      "         (d-spacing 1.0761 is duplicated 2 times)\n",
      "PowderN: sample: Set multiplicity to 1 for lines [4:5]\n",
      "         (d-spacing 1.61415 is duplicated 2 times)\n",
      "PowderN: sample: Set multiplicity to 1 for lines [6:7]\n",
      "         (d-spacing 1.61758 is duplicated 2 times)\n",
      "PowderN: sample: Set multiplicity to 1 for lines [8:9]\n",
      "         (d-spacing 1.64542 is duplicated 2 times)\n",
      "PowderN: sample: Set multiplicity to 1 for lines [10:13]\n",
      "         (d-spacing 1.70472 is duplicated 4 times)\n",
      "PowderN: sample: Set multiplicity to 1 for lines [14:17]\n",
      "         (d-spacing 1.73115 is duplicated 4 times)\n",
      "PowderN: sample: Set multiplicity to 1 for lines [18:21]\n",
      "         (d-spacing 1.94283 is duplicated 4 times)\n",
      "PowderN: sample: Set multiplicity to 1 for lines [22:25]\n",
      "         (d-spacing 1.96606 is duplicated 4 times)\n",
      "PowderN: sample: Set multiplicity to 1 for lines [26:29]\n",
      "         (d-spacing 2.28519 is duplicated 4 times)\n",
      "PowderN: sample: Set multiplicity to 1 for lines [30:33]\n",
      "         (d-spacing 2.30497 is duplicated 4 times)\n",
      "PowderN: sample: Set multiplicity to 1 for lines [34:37]\n",
      "         (d-spacing 2.30737 is duplicated 4 times)\n",
      "PowderN: sample: Set multiplicity to 1 for lines [38:45]\n",
      "         (d-spacing 2.36928 is duplicated 8 times)\n",
      "PowderN: sample: Set multiplicity to 1 for lines [46:53]\n",
      "         (d-spacing 2.54597 is duplicated 8 times)\n",
      "PowderN: sample: Set multiplicity to 1 for lines [54:61]\n",
      "         (d-spacing 2.81593 is duplicated 8 times)\n",
      "PowderN: sample: Read 62 reflections from file 'YBaCuO.lau'\n",
      "PowderN: sample: Vc=173.28 [Angs] sigma_abs=14.82 [barn] sigma_inc=2.105 [barn] reflections=YBaCuO.lau\n",
      "Detector: banana_I=1.35662e-06 banana_ERR=2.36735e-08 banana_N=12673 \"banana.dat\"\n",
      "Events:   \"events_dat_list.p.x.y.z.vx.vy.vz.t\"\n",
      "Detector: PSD_I=4.05438e-05 PSD_ERR=3.1601e-07 PSD_N=45643 \"psd.dat\"\n",
      "PowderN: sample: Info: you may highly improve the computation efficiency by using\n",
      "    SPLIT 62 COMPONENT sample=PowderN(...)\n",
      "  in the instrument description data_example.instr.\n",
      "loading system configuration\n",
      "\n"
     ]
    }
   ],
   "source": [
    "instrument.settings(ncount=1E5, output_path=\"data_example\")\n",
    "instrument.backengine()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "funky-forest",
   "metadata": {},
   "source": [
    "## Getting the data\n",
    "After a simulation has been performed with an instrument object, the data is held by the instrument object in the *data* attribute. It can be retrieved by accessing it directly. If a simulation failed, the *data* attribute will contain None."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "european-communication",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[\n",
      "McStasData: banana type: 1D  I:1.35662e-06 E:2.36735e-08 N:12673, \n",
      "McStasDataEvent: events with 46045 events. Variables: p x y z vx vy vz t, \n",
      "McStasData: PSD type: 2D  I:4.05438e-05 E:3.1601e-07 N:45643]\n"
     ]
    }
   ],
   "source": [
    "data = instrument.data\n",
    "print(data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "prerequisite-survey",
   "metadata": {},
   "source": [
    "## McStasData objects\n",
    "The data retrieved from the instrument object is in the form of a list that contains [McStasData](../_autosummary/mcstasscript.data.data.McStasData.rst) and [McStasDataEvent](../_autosummary/mcstasscript.data.data.McStasDataEvent.rst) objects. The McStasScript module [*functions*](../_autosummary/mcstasscript.functions.rst) contains a function called [*name_search*](../_autosummary/mcstasscript.functions.name_search.rst) which can be used to select a certain element of such a data list. It will match the component name first and if no match is found it will check for match with the filename. Here [*name_search*](../_autosummary/mcstasscript.functions.name_search.rst) is used to retrieve the PSD [McStasData](../_autosummary/mcstasscript.data.data.McStasData.rst) object."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "stretch-request",
   "metadata": {},
   "outputs": [],
   "source": [
    "PSD = functions.name_search(\"PSD\", data)\n",
    "banana = functions.name_search(\"banana\", data)\n",
    "events = functions.name_search(\"events\", data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "governing-librarian",
   "metadata": {},
   "source": [
    "### Accessing metadata\n",
    "The McStasData object carries relevant metadata in a *metadata* attribute. Using the python print function this object can display basic information on the contained data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "provincial-dollar",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "metadata object\n",
      "component_name: PSD\n",
      "filename: psd.dat\n",
      "2D data of dimension (100, 100)\n",
      "  [-2.25: 2.25] X position [cm]\n",
      "  [-3.0: 3.0] Y position [cm]\n",
      "Instrument parameters: \n",
      " wavelength = 1.2\n",
      "\n",
      "metadata object\n",
      "component_name: banana\n",
      "filename: banana.dat\n",
      "1D data of length 250\n",
      "  [5.0: 175.0] Longitude [deg]\n",
      " Intensity [n/s/bin]\n",
      "Instrument parameters: \n",
      " wavelength = 1.2\n",
      "\n",
      "metadata object\n",
      "component_name: events\n",
      "filename: events_dat_list.p.x.y.z.vx.vy.vz.t\n",
      "2D data of dimension (8, 46045)\n",
      "  [1.0: 46045.0] List of neutron events\n",
      "  [1.0: 8.0] p x y z vx vy vz t\n",
      "Instrument parameters: \n",
      " wavelength = 1.2\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(PSD.metadata)\n",
    "print(banana.metadata)\n",
    "print(events.metadata)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "clean-schedule",
   "metadata": {},
   "source": [
    "The metadata object has attributes which can be accessed as well. The info attribute is a dict with the raw metadata read from the file.\n",
    "\n",
    "- component_name\n",
    "- dimension\n",
    "- filename\n",
    "- limits\n",
    "- parameters\n",
    "- info"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "driven-development",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Date': 'Wed Jan 19 10:37:01 2022 (1642585021)',\n",
       " 'type': 'array_2d(100, 100)',\n",
       " 'Source': 'data_example (data_example.instr)',\n",
       " 'component': 'PSD',\n",
       " 'position': '0 0 0.1',\n",
       " 'title': 'PSD monitor',\n",
       " 'Ncount': '100000',\n",
       " 'filename': 'psd.dat',\n",
       " 'statistics': 'X0=0.00142728; dX=1.39462; Y0=0.00872072; dY=0.868485;',\n",
       " 'signal': 'Min=0; Max=3.45479e-08; Mean=4.05438e-09;',\n",
       " 'values': '4.05438e-05 3.1601e-07 45643',\n",
       " 'xvar': 'X',\n",
       " 'yvar': 'Y',\n",
       " 'xlabel': 'X position [cm]',\n",
       " 'ylabel': 'Y position [cm]',\n",
       " 'zvar': 'I',\n",
       " 'zlabel': 'Signal per bin',\n",
       " 'xylimits': '-2.25 2.25 -3 3',\n",
       " 'variables': 'I I_err N',\n",
       " 'Parameters': {'wavelength': 1.2}}"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "PSD.metadata.info"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "patient-calibration",
   "metadata": {},
   "source": [
    "### Accessing the data\n",
    "McStasData objects stores the data as [Numpy arrays](https://numpy.org/doc/stable/reference/generated/numpy.array.html), these can be accessed as attributes.\n",
    "\n",
    "- Intensity: Holds the intensity, sum of all ray weights\n",
    "- Error: Error on intensity\n",
    "- Ncount: Number of rays that reached "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "corporate-capital",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Intensity\n",
      "[[0.00000000e+00 8.36923762e-11 9.90654687e-12 ... 5.78813520e-11\n",
      "  9.30106888e-11 8.23083874e-11]\n",
      " [3.77954348e-11 5.70117894e-10 3.98761330e-11 ... 2.26186799e-11\n",
      "  6.72292277e-13 2.88259294e-12]\n",
      " [0.00000000e+00 1.06225373e-12 6.21120081e-10 ... 1.08138710e-09\n",
      "  3.81728162e-13 6.11481124e-10]\n",
      " ...\n",
      " [1.13591007e-09 5.78483040e-10 2.44007139e-11 ... 5.06296836e-10\n",
      "  5.72820617e-10 9.50614418e-11]\n",
      " [0.00000000e+00 7.82698639e-13 2.73126257e-11 ... 8.83845952e-12\n",
      "  5.37924093e-10 1.42722718e-11]\n",
      " [0.00000000e+00 6.03272267e-10 6.04653765e-12 ... 5.50307011e-10\n",
      "  0.00000000e+00 1.38062192e-11]]\n",
      "Error\n",
      "[[0.00000000e+00 8.36923762e-11 9.90654687e-12 ... 6.97617700e-11\n",
      "  6.61365499e-11 9.95248188e-11]\n",
      " [3.77954348e-11 6.54289370e-10 3.98761330e-11 ... 2.26186799e-11\n",
      "  6.72292277e-13 2.88259294e-12]\n",
      " [0.00000000e+00 1.06225373e-12 6.32887137e-10 ... 7.86484158e-10\n",
      "  3.81728162e-13 6.86641141e-10]\n",
      " ...\n",
      " [8.04687390e-10 6.51790856e-10 2.44007139e-11 ... 5.56256086e-10\n",
      "  6.68490333e-10 1.12454951e-10]\n",
      " [0.00000000e+00 7.82698639e-13 2.94919598e-11 ... 7.39656841e-12\n",
      "  5.89792079e-10 1.52654093e-11]\n",
      " [0.00000000e+00 7.16637290e-10 6.04653765e-12 ... 5.50307011e-10\n",
      "  0.00000000e+00 1.38062192e-11]]\n",
      "Ncount\n",
      "[[0. 1. 1. ... 2. 2. 2.]\n",
      " [1. 2. 1. ... 1. 1. 1.]\n",
      " [0. 1. 3. ... 3. 1. 2.]\n",
      " ...\n",
      " [2. 3. 1. ... 3. 2. 2.]\n",
      " [0. 1. 2. ... 2. 3. 3.]\n",
      " [0. 2. 1. ... 1. 0. 1.]]\n"
     ]
    }
   ],
   "source": [
    "print(\"Intensity\")\n",
    "print(PSD.Intensity)\n",
    "\n",
    "print(\"Error\")\n",
    "print(PSD.Error)\n",
    "\n",
    "print(\"Ncount\")\n",
    "print(PSD.Ncount)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "regional-spider",
   "metadata": {},
   "source": [
    "McStasDataEvent objecst stores event data, and for this reason does not have *Error* or *Ncount*. The event information is contained in a 2D Numpy array in the *Intensity* and *Events* attributes. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "daily-celebrity",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Events [[ 5.39981936e-10 -2.21217001e-02  7.80528132e-04 ...  5.20467510e-01\n",
      "   3.23299599e+03  0.00000000e+00]\n",
      " [ 5.39949050e-10  1.64184785e-02 -1.46834548e-02 ...  2.05419178e+01\n",
      "   3.48484501e+03  0.00000000e+00]\n",
      " [ 5.39968341e-10  1.95439930e-02 -7.91965308e-03 ...  7.63373380e+00\n",
      "   3.47095855e+03  0.00000000e+00]\n",
      " ...\n",
      " [ 6.37980903e-12 -2.37893718e-03  1.26924011e-02 ... -4.38262053e+02\n",
      "   3.07492178e+03  0.00000000e+00]\n",
      " [ 5.39983863e-10  1.70037022e-02  1.43626457e-02 ... -3.45062727e+00\n",
      "   3.09106012e+03  0.00000000e+00]\n",
      " [ 5.39974416e-10 -2.32028381e-02  7.50810781e-03 ...  3.80113690e+00\n",
      "   3.17502682e+03  0.00000000e+00]]\n"
     ]
    }
   ],
   "source": [
    "print(\"Events\", events.Events)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "damaged-twelve",
   "metadata": {},
   "source": [
    "The original path to the data is also contained within the McStasData object and can be returned with get_data_location."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "consistent-champagne",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'/Users/madsbertelsen/PaNOSC/McStasScript/github/McStasScript/docs/source/user_guide/data_example_15'"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "PSD.get_data_location()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "apart-honolulu",
   "metadata": {},
   "source": [
    "### Plotting \n",
    "[McStasData](../_autosummary/mcstasscript.data.data.McStasData.rst) objects contain information on how the data should be plotted, including for example if it should be on a logarithmic axis. This information is contained in the *plot_options* attribute of a [McStasData](../_autosummary/mcstasscript.data.data.McStasData.rst) object. The plotting are described in more detail on the [plotting page](plotting.ipynb)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "consecutive-newsletter",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "plot_options log: False\n",
       " colormap: jet\n",
       " show_colorbar: True\n",
       " cut_min: 0\n",
       " cut_max: 1\n",
       " x_limit_multiplier: 1\n",
       " y_limit_multiplier: 1"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "PSD.plot_options"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "nervous-seller",
   "metadata": {},
   "source": [
    "The plotter module of McStasScript can plot a McStasData object directly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "enclosed-cuisine",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Plotting data with name PSD\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x504 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plotter.make_plot(PSD)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "boolean-frame",
   "metadata": {},
   "source": [
    "The *plot_options* can be updated with *set_plot_options* that takes keyword arguments."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "afraid-variation",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Plotting data with name PSD\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x504 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "PSD.set_plot_options(log=True, top_lim=1.5, bottom_lim=-1.5, colormap=\"hot\", orders_of_mag=2)\n",
    "plotter.make_plot(PSD)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fluid-director",
   "metadata": {},
   "source": [
    "The *set_plot_options* takes the following keyword arguments. Some will only apply for 2D data, for example *orders_of_mag*.\n",
    "\n",
    "| Keyword argument | Type | Default | Description |\n",
    "| --- | --- | --- | --- |\n",
    "| log | bool | False | Logarithmic axis for y in 1D or z in 2D |\n",
    "| orders_of_mag | float | 300 | Maximum orders of magnitude to plot in 2D |\n",
    "| colormap | str | \"jet\" | Matplotlib colormap to use |\n",
    "| show_colorbar | bool | True | Show the colorbar |\n",
    "| x_axis_multiplier | float | 1 | Multiplier for x axis data |\n",
    "| y_axis_multiplier | float | 1 | Multiplier for y axis data |\n",
    "| cut_min | float | 0 | Unitless lower limit normalized to data range |\n",
    "| cut_max | float | 1 | Unitless upper limit normalized to data range |\n",
    "| left_lim | float | | Lower limit to plot range of x axis |\n",
    "| right_lim | float | | Upper limit to plot range of x axis|\n",
    "| bottom_lim | float | | Lower limit to plot range of y axis|\n",
    "| top_lim | float | | Upper limit to plot range of y axis|"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "computational-pound",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "impressed-revolution",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "celltoolbar": "Tags",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
