{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "coated-control",
   "metadata": {},
   "source": [
    "# Data\n",
    "Data from simulations performed by McStasScript is returned as [McStasData](../_autosummary/mcstasscript.data.data.McStasData.rst) objects. This section will explore what these contain and how one can manipulate them. First a small instrument is written that will supply data to investigate.\n",
    "\n",
    "## Example instrument\n",
    "The instrument will consist of a source, a powder sample and some monitors that will record data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "wanted-applicant",
   "metadata": {
    "tags": [
     "hide-input"
    ]
   },
   "outputs": [],
   "source": [
    "from mcstasscript.interface import instr, functions, plotter\n",
    "\n",
    "instrument = instr.McStas_instr(\"data_example\")\n",
    "\n",
    "source = instrument.add_component(\"source\", \"Source_simple\")\n",
    "source.set_parameters(xwidth=0.05, yheight=0.03, dlambda=0.1,\n",
    "                      dist=5, focus_xw=0.015, focus_yh=0.03)\n",
    "source.lambda0 = instrument.add_parameter(\"wavelength\", value=1.2)\n",
    "\n",
    "sample = instrument.add_component(\"sample\", \"PowderN\")\n",
    "sample.set_parameters(radius=source.focus_xw, yheight=source.focus_yh,\n",
    "                      reflections='\"Na2Ca3Al2F14.laz\"', barns=0)\n",
    "sample.set_AT(source.dist, RELATIVE=source)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "antique-injection",
   "metadata": {},
   "source": [
    "### Example monitors\n",
    "Here three monitors are defined, a 2D PSD monitor, a 1D banana monitor and an event monitor. Monitor_nD is used for the last two, where the option string describes the geometry and what is to be recorded."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "stunning-fellowship",
   "metadata": {},
   "outputs": [],
   "source": [
    "banana = instrument.add_component(\"banana\", \"Monitor_nD\", RELATIVE=sample)\n",
    "banana.set_parameters(xwidth=1.5, yheight=0.4, restore_neutron=1, filename='\"banana.dat\"')\n",
    "banana.options = '\"theta limits=[5 175] bins=250, banana\"'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "numeric-egyptian",
   "metadata": {},
   "outputs": [],
   "source": [
    "event = instrument.add_component(\"events\", \"Monitor_nD\", RELATIVE=sample)\n",
    "event.set_parameters(xwidth=0.5, yheight=0.5, restore_neutron=1, filename='\"events.dat\"')\n",
    "event.options = '\"list all auto, x y z vx vy vz t\"'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "activated-panic",
   "metadata": {},
   "outputs": [],
   "source": [
    "mon = instrument.add_component(\"PSD\", \"PSD_monitor\")\n",
    "mon.set_AT(0.1, RELATIVE=sample)\n",
    "mon.set_parameters(nx=100, ny=100, filename='\"psd.dat\"',\n",
    "                   xwidth=3*sample.radius, yheight=2*sample.yheight, restore_neutron=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "breathing-devon",
   "metadata": {},
   "source": [
    "### Performing the simulation\n",
    "The simulation is executed using the *backengine* method with a low number of neutrons."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "substantial-paste",
   "metadata": {
    "scrolled": true,
    "tags": [
     "scroll-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO: Using directory: \"/Users/madsbertelsen/PaNOSC/McStasScript/github/McStasScript/docs/source/user_guide/data_example_21\"\n",
      "INFO: Regenerating c-file: data_example.c\n",
      "CFLAGS=\n",
      "INFO: Recompiling: ./data_example.out\n",
      "mccode-r.c:2837:3: warning: expression result unused [-Wunused-value]\n",
      "  *t0;\n",
      "  ^~~\n",
      "1 warning generated.\n",
      "INFO: ===\n",
      "Warning: 54849 events were removed in Component[5] PSD=PSD_monitor()\n",
      "         (negative time, miss next components, rounding errors, Nan, Inf).\n",
      "INFO: Placing instr file copy data_example.instr in dataset /Users/madsbertelsen/PaNOSC/McStasScript/github/McStasScript/docs/source/user_guide/data_example_21\n",
      "\n",
      "      Opening input file '/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//data/Na2Ca3Al2F14.laz' (Table_Read_Offset)\n",
      "Table from file 'Na2Ca3Al2F14.laz' (block 1) is 841 x 18 (x=1:20), constant step. interpolation: linear\n",
      "  '# TITLE *-Na2Ca3Al2F14-[I213] Courbion, G.;Ferey, G.[1988] Standard NAC cal ...'\n",
      "PowderN: sample: Reading 841 rows from Na2Ca3Al2F14.laz\n",
      "PowderN: sample: Powder file probably of type Lazy Pulver (laz)\n",
      "WARNING: but F2 unit is set to barns=0 (fm^2). Intensity might be 100 times too low.\n",
      "PowderN: sample: Read 841 reflections from file 'Na2Ca3Al2F14.laz'\n",
      "PowderN: sample: Vc=1079.1 [Angs] sigma_abs=11.7856 [barn] sigma_inc=13.6704 [barn] reflections=Na2Ca3Al2F14.laz\n",
      "Detector: banana_I=3.09053e-07 banana_ERR=7.2496e-09 banana_N=13127 \"banana.dat\"\n",
      "Events:   \"events_dat_list.p.x.y.z.vx.vy.vz.t\"\n",
      "Detector: PSD_I=5.12526e-05 PSD_ERR=5.1007e-07 PSD_N=10736 \"psd.dat\"\n",
      "PowderN: sample: Info: you may highly improve the computation efficiency by using\n",
      "    SPLIT 504 COMPONENT sample=PowderN(...)\n",
      "  in the instrument description data_example.instr.\n",
      "loading system configuration\n",
      "\n"
     ]
    }
   ],
   "source": [
    "instrument.settings(ncount=1E5, output_path=\"data_example\")\n",
    "instrument.backengine()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "alike-separation",
   "metadata": {},
   "source": [
    "## Getting the data\n",
    "After a simulation has been performed with an instrument object, the data is held by the instrument object in the *data* attribute. It can be retrieved by accessing it directly. If a simulation failed, the *data* attribute will contain None."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "incorrect-medicine",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[\n",
      "McStasData: banana type: 1D  I:3.09053e-07 E:7.2496e-09 N:13127, \n",
      "McStasDataEvent: events with 43619 events. Variables: p x y z vx vy vz t, \n",
      "McStasData: PSD type: 2D  I:5.12526e-05 E:5.1007e-07 N:10736]\n"
     ]
    }
   ],
   "source": [
    "data = instrument.data\n",
    "print(data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "caroline-department",
   "metadata": {},
   "source": [
    "## McStasData objects\n",
    "The data retrieved from the instrument object is in the form of a list that contains [McStasData](../_autosummary/mcstasscript.data.data.McStasData.rst) and [McStasDataEvent](../_autosummary/mcstasscript.data.data.McStasDataEvent.rst) objects. The McStasScript module [*functions*](../_autosummary/mcstasscript.interface.functions.rst) contains a function called [*name_search*](../_autosummary/mcstasscript.functions.name_search.rst) which can be used to select a certain element of such a data list. It will match the component name first and if no match is found it will check for match with the filename. Here [*name_search*](../_autosummary/mcstasscript.interface.functions.name_search.rst) is used to retrieve the PSD [McStasData](../_autosummary/mcstasscript.data.data.McStasData.rst) object."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "australian-electric",
   "metadata": {},
   "outputs": [],
   "source": [
    "PSD = functions.name_search(\"PSD\", data)\n",
    "banana = functions.name_search(\"banana\", data)\n",
    "events = functions.name_search(\"events\", data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "incoming-charity",
   "metadata": {},
   "source": [
    "### Accessing metadata\n",
    "The McStasData object carries relevant metadata in a *metadata* attribute. Using the python print function this object can display basic information on the contained data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "processed-choice",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "metadata object\n",
      "component_name: PSD\n",
      "filename: psd.dat\n",
      "2D data of dimension (100, 100)\n",
      "  [-2.25: 2.25] X position [cm]\n",
      "  [-3.0: 3.0] Y position [cm]\n",
      "Instrument parameters: \n",
      " wavelength = 1.2\n",
      "\n",
      "metadata object\n",
      "component_name: banana\n",
      "filename: banana.dat\n",
      "1D data of length 250\n",
      "  [5.0: 175.0] Longitude [deg]\n",
      " Intensity [n/s/bin]\n",
      "Instrument parameters: \n",
      " wavelength = 1.2\n",
      "\n",
      "metadata object\n",
      "component_name: events\n",
      "filename: events_dat_list.p.x.y.z.vx.vy.vz.t\n",
      "2D data of dimension (8, 43619)\n",
      "  [1.0: 43619.0] List of neutron events\n",
      "  [1.0: 8.0] p x y z vx vy vz t\n",
      "Instrument parameters: \n",
      " wavelength = 1.2\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(PSD.metadata)\n",
    "print(banana.metadata)\n",
    "print(events.metadata)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "unique-alexander",
   "metadata": {},
   "source": [
    "The metadata object has attributes which can be accessed as well. The info attribute is a dict with the raw metadata read from the file.\n",
    "\n",
    "- component_name\n",
    "- dimension\n",
    "- filename\n",
    "- limits\n",
    "- parameters\n",
    "- info"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "mature-penguin",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Date': 'Wed Jan 19 16:25:40 2022 (1642605940)',\n",
       " 'type': 'array_2d(100, 100)',\n",
       " 'Source': 'data_example (data_example.instr)',\n",
       " 'component': 'PSD',\n",
       " 'position': '0 0 5.1',\n",
       " 'title': 'PSD monitor',\n",
       " 'Ncount': '100000',\n",
       " 'filename': 'psd.dat',\n",
       " 'statistics': 'X0=0.00170905; dX=0.444962; Y0=-0.0029441; dY=0.887821;',\n",
       " 'signal': 'Min=0; Max=8.13188e-08; Mean=5.12526e-09;',\n",
       " 'values': '5.12526e-05 5.1007e-07 10736',\n",
       " 'xvar': 'X',\n",
       " 'yvar': 'Y',\n",
       " 'xlabel': 'X position [cm]',\n",
       " 'ylabel': 'Y position [cm]',\n",
       " 'zvar': 'I',\n",
       " 'zlabel': 'Signal per bin',\n",
       " 'xylimits': '-2.25 2.25 -3 3',\n",
       " 'variables': 'I I_err N',\n",
       " 'Parameters': {'wavelength': 1.2}}"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "PSD.metadata.info"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "comfortable-apple",
   "metadata": {},
   "source": [
    "### Accessing the data\n",
    "McStasData objects stores the data as [Numpy arrays](https://numpy.org/doc/stable/reference/generated/numpy.array.html), these can be accessed as attributes.\n",
    "\n",
    "- Intensity: Holds the intensity, sum of all ray weights\n",
    "- Error: Error on intensity\n",
    "- Ncount: Number of rays that reached "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "spare-embassy",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Intensity\n",
      "[[0.00000000e+00 0.00000000e+00 0.00000000e+00 ... 0.00000000e+00\n",
      "  0.00000000e+00 0.00000000e+00]\n",
      " [0.00000000e+00 0.00000000e+00 0.00000000e+00 ... 0.00000000e+00\n",
      "  0.00000000e+00 0.00000000e+00]\n",
      " [0.00000000e+00 3.16421435e-13 0.00000000e+00 ... 0.00000000e+00\n",
      "  0.00000000e+00 0.00000000e+00]\n",
      " ...\n",
      " [0.00000000e+00 0.00000000e+00 0.00000000e+00 ... 0.00000000e+00\n",
      "  0.00000000e+00 0.00000000e+00]\n",
      " [0.00000000e+00 0.00000000e+00 0.00000000e+00 ... 0.00000000e+00\n",
      "  0.00000000e+00 0.00000000e+00]\n",
      " [0.00000000e+00 0.00000000e+00 0.00000000e+00 ... 0.00000000e+00\n",
      "  0.00000000e+00 1.83098259e-10]]\n",
      "Error\n",
      "[[0.00000000e+00 0.00000000e+00 0.00000000e+00 ... 0.00000000e+00\n",
      "  0.00000000e+00 0.00000000e+00]\n",
      " [0.00000000e+00 0.00000000e+00 0.00000000e+00 ... 0.00000000e+00\n",
      "  0.00000000e+00 0.00000000e+00]\n",
      " [0.00000000e+00 3.16421435e-13 0.00000000e+00 ... 0.00000000e+00\n",
      "  0.00000000e+00 0.00000000e+00]\n",
      " ...\n",
      " [0.00000000e+00 0.00000000e+00 0.00000000e+00 ... 0.00000000e+00\n",
      "  0.00000000e+00 0.00000000e+00]\n",
      " [0.00000000e+00 0.00000000e+00 0.00000000e+00 ... 0.00000000e+00\n",
      "  0.00000000e+00 0.00000000e+00]\n",
      " [0.00000000e+00 0.00000000e+00 0.00000000e+00 ... 0.00000000e+00\n",
      "  0.00000000e+00 1.83098259e-10]]\n",
      "Ncount\n",
      "[[0. 0. 0. ... 0. 0. 0.]\n",
      " [0. 0. 0. ... 0. 0. 0.]\n",
      " [0. 1. 0. ... 0. 0. 0.]\n",
      " ...\n",
      " [0. 0. 0. ... 0. 0. 0.]\n",
      " [0. 0. 0. ... 0. 0. 0.]\n",
      " [0. 0. 0. ... 0. 0. 1.]]\n"
     ]
    }
   ],
   "source": [
    "print(\"Intensity\")\n",
    "print(PSD.Intensity)\n",
    "\n",
    "print(\"Error\")\n",
    "print(PSD.Error)\n",
    "\n",
    "print(\"Ncount\")\n",
    "print(PSD.Ncount)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "distributed-guess",
   "metadata": {},
   "source": [
    "McStasDataEvent objecst stores event data, and for this reason does not have *Error* or *Ncount*. The event information is contained in a 2D Numpy array in the *Intensity* and *Events* attributes. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "colored-giving",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Events [[ 3.19443415e-13 -1.72869932e-02 -4.51773809e-03 ... -2.41580555e+03\n",
      "  -3.05806649e+02  1.40746641e-03]\n",
      " [ 2.13584425e-12  1.71666512e-02 -8.63270069e-03 ... -3.19302620e+01\n",
      "  -8.06158169e+02  1.61182199e-03]\n",
      " [ 1.19125080e-12  4.48926741e-02  3.57122451e-03 ... -1.91672521e+02\n",
      "   2.31988770e+02  1.58734495e-03]\n",
      " ...\n",
      " [ 1.32055701e-12 -1.69617301e-03  3.22148392e-03 ... -7.69868816e+02\n",
      "  -1.41856315e+03  1.53521303e-03]\n",
      " [ 1.24293709e-12  1.20333693e-01  8.91293709e-02 ...  1.99940422e+03\n",
      "   3.26712779e+02  1.54102054e-03]\n",
      " [ 1.51518794e-12  2.36891432e-02 -5.80047664e-03 ... -1.15832262e+03\n",
      "  -1.66223218e+03  1.39916492e-03]]\n"
     ]
    }
   ],
   "source": [
    "print(\"Events\", events.Events)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "looking-second",
   "metadata": {},
   "source": [
    "The original path to the data is also contained within the McStasData object and can be returned with get_data_location."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "short-sullivan",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'/Users/madsbertelsen/PaNOSC/McStasScript/github/McStasScript/docs/source/user_guide/data_example_21'"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "PSD.get_data_location()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "grateful-headline",
   "metadata": {},
   "source": [
    "### Plotting \n",
    "[McStasData](../_autosummary/mcstasscript.data.data.McStasData.rst) objects contain information on how the data should be plotted, including for example if it should be on a logarithmic axis. This information is contained in the *plot_options* attribute of a [McStasData](../_autosummary/mcstasscript.data.data.McStasData.rst) object. The plotting are described in more detail on the [plotting page](plotting.ipynb)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "sensitive-cabinet",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "plot_options log: False\n",
       " colormap: jet\n",
       " show_colorbar: True\n",
       " cut_min: 0\n",
       " cut_max: 1\n",
       " x_limit_multiplier: 1\n",
       " y_limit_multiplier: 1"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "PSD.plot_options"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "direct-affect",
   "metadata": {},
   "source": [
    "The plotter module of McStasScript can plot a McStasData object directly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "angry-graph",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Plotting data with name PSD\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x504 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plotter.make_plot(PSD)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "spread-boost",
   "metadata": {},
   "source": [
    "The *plot_options* can be updated with *set_plot_options* that takes keyword arguments."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "stopped-replication",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Plotting data with name PSD\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x504 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "PSD.set_plot_options(log=True, top_lim=1.5, bottom_lim=-1.5, colormap=\"hot\", orders_of_mag=2)\n",
    "plotter.make_plot(PSD)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "brilliant-knife",
   "metadata": {},
   "source": [
    "The *set_plot_options* takes the following keyword arguments. Some will only apply for 2D data, for example *orders_of_mag*.\n",
    "\n",
    "| Keyword argument | Type | Default | Description |\n",
    "| --- | --- | --- | --- |\n",
    "| log | bool | False | Logarithmic axis for y in 1D or z in 2D |\n",
    "| orders_of_mag | float | 300 | Maximum orders of magnitude to plot in 2D |\n",
    "| colormap | str | \"jet\" | Matplotlib colormap to use |\n",
    "| show_colorbar | bool | True | Show the colorbar |\n",
    "| x_axis_multiplier | float | 1 | Multiplier for x axis data |\n",
    "| y_axis_multiplier | float | 1 | Multiplier for y axis data |\n",
    "| cut_min | float | 0 | Unitless lower limit normalized to data range |\n",
    "| cut_max | float | 1 | Unitless upper limit normalized to data range |\n",
    "| left_lim | float | | Lower limit to plot range of x axis |\n",
    "| right_lim | float | | Upper limit to plot range of x axis|\n",
    "| bottom_lim | float | | Lower limit to plot range of y axis|\n",
    "| top_lim | float | | Upper limit to plot range of y axis|"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "frequent-journal",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "convinced-depression",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "celltoolbar": "Tags",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
