{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# McStasScript introduction\n",
    "This notebook shows how to use McStas and McStasScript to perform a basic simulation of a neutron diffractometer. The following software is required:\n",
    "- McStas (www.mcstas.org)\n",
    "- McStasScript (can be installed with python -m pip install McStasScript)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Anatomy of a McStas instrument\n",
    "\n",
    "In McStas a simulation is described using an instrument file. Such an instrument has five sections where code can be added to define the simulation to be perfomed.\n",
    "\n",
    "- Instrument definition\n",
    "- Declare section\n",
    "- Initialize section\n",
    "- Trace section\n",
    "- Finally section\n",
    "\n",
    "##### Instrument definition\n",
    "In the instrument definition it is possible to define *instrument parameters* which can be specified at run time and used in the remaining sections for either calculations or as direct input to the components.\n",
    "\n",
    "##### Declare section\n",
    "Here internal variables can be declared with C syntax.\n",
    "\n",
    "##### Initialize section\n",
    "The initialize section is used for performing calculations, typically using both instrument parameters and declared variables to calculate for example chopper phases, angles and similar. The calculations are performed using C syntax. These calculations are performed before the raytracing simulation, and thus only performed once in a given simulation.\n",
    "\n",
    "##### Trace section\n",
    "In the trace section McStas *components* are added, these are the building blocks of the simulation and correspond to different c codes that describe parts of neutron instruments or samples. Each component have a set of available parameters, some of which may be required. These will set the behavior of a component, a guide component may for example have parameters describing the physical shape and mirror reflectivity. Components also need to be placed in 3D space, and can be placed either in the absolute coordinate system or relative to a previously defined component.\n",
    "\n",
    "##### Finally section\n",
    "The finally section is very similar to the initialize section, here calculations can be performed after the raytracing has been completed, again using C syntax. This may be some brief data analysis or print of some status.\n",
    "\n",
    "### McStasScript python package and this tutorial\n",
    "The McStasScript python package provides an API to build and run such instruments files, but it is still necessary to have a basic understanding of the structure of the underlying instrument file and its capabilities and limitations. These tutorials will teach basic use of McStas through the McStasScript API without assuming expertise in the underlying McStas software."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Import the McStasScript package\n",
    "The McStasScript modules intended for normal use is located in the interface submodule, and one usually imports the necessary modules from there."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from mcstasscript.interface import instr, functions, plotter"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### McStasScript configuration\n",
    "Before the first use of McStasScript it is necessary to configure the package so it can locate the McStas installation and call the binaries. One way to find the path is to open a terminal with the McStas environment and run:\n",
    "\n",
    "which mcrun\n",
    "\n",
    "This should return the path for the binary, and the mcstas path is usually just one step back."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "configurator = functions.Configurator()\n",
    "configurator.set_mcrun_path(\"/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1/bin/\")\n",
    "configurator.set_mcstas_path(\"/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Create an instrument object\n",
    "A McStas instrument is described with a McStas instrument object which is created using the *McStas_instr* method on the instr class. Creating an instrument object also reads available components, both in the work folder and from the McStas installation. By default, the work folder is the current work directory, but using the input_path keyword argument this can be change to avoid cluttering the folder containing notebooks.\n",
    "\n",
    "Here our instrument object for this tutorial is created, we give it the name python_tutorial."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "instrument = instr.McStas_instr(\"python_tutorial\", input_path=\"run_folder\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Requesting help on source components\n",
    "The main building blocks used for creating a McStas simulation are the components. One can ask an instrument object which components are available, and get help for each component. Here we check what sources are available, and ask for help on the Source_div component."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Here are the available component categories:\n",
      " contrib\n",
      " misc\n",
      " monitors\n",
      " obsolete\n",
      " optics\n",
      " samples\n",
      " sources\n",
      " union\n",
      "Call show_components(category_name) to display\n"
     ]
    }
   ],
   "source": [
    "instrument.show_components()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Here are all components in the sources category.\n",
      " Adapt_check     Moderator           Source_Optimizer   Source_gen\n",
      " ESS_butterfly   Monitor_Optimizer   Source_adapt       Source_simple\n",
      " ESS_moderator   Source_Maxwell_3    Source_div         \n"
     ]
    }
   ],
   "source": [
    "instrument.show_components(\"sources\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " ___ Help Source_div ________________________________________________________________\n",
      "|\u001b[1moptional parameter\u001b[0m|\u001b[1m\u001b[4mrequired parameter\u001b[0m\u001b[0m|\u001b[1m\u001b[94mdefault value\u001b[0m\u001b[0m|\u001b[1m\u001b[92muser specified value\u001b[0m\u001b[0m|\n",
      "\u001b[4m\u001b[1mxwidth\u001b[0m\u001b[0m [m] // Width of source\n",
      "\u001b[4m\u001b[1myheight\u001b[0m\u001b[0m [m] // Height of source\n",
      "\u001b[4m\u001b[1mfocus_aw\u001b[0m\u001b[0m [deg] // FWHM (Gaussian) or maximal (uniform) horz. width divergence\n",
      "\u001b[4m\u001b[1mfocus_ah\u001b[0m\u001b[0m [deg] // FWHM (Gaussian) or maximal (uniform) vert. height divergence\n",
      "\u001b[1mE0\u001b[0m = \u001b[1m\u001b[94m0.0\u001b[0m\u001b[0m [meV] // Mean energy of neutrons.\n",
      "\u001b[1mdE\u001b[0m = \u001b[1m\u001b[94m0.0\u001b[0m\u001b[0m [meV] // Energy half spread of neutrons.\n",
      "\u001b[1mlambda0\u001b[0m = \u001b[1m\u001b[94m0.0\u001b[0m\u001b[0m [Ang] // Mean wavelength of neutrons (only relevant for E0=0)\n",
      "\u001b[1mdlambda\u001b[0m = \u001b[1m\u001b[94m0.0\u001b[0m\u001b[0m [Ang] // Wavelength half spread of neutrons.\n",
      "\u001b[1mgauss\u001b[0m = \u001b[1m\u001b[94m0.0\u001b[0m\u001b[0m [0|1] // Criterion\n",
      "\u001b[1mflux\u001b[0m = \u001b[1m\u001b[94m1.0\u001b[0m\u001b[0m [1/(s cm 2 st energy_unit)] // flux per energy unit, Angs or meV\n",
      "-------------------------------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "instrument.component_help(\"Source_div\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Adding a component\n",
    "Now we are ready to add a component to our simulation which is done with the *add_component* method on our instrument. This method requires two inputs:\n",
    "\n",
    "- Nickname for the component used to refer to this component instance\n",
    "- Name of the component type to be used\n",
    "\n",
    "Here we want to make a component nicknamed \"source\" of type \"Source_div\".\n",
    "\n",
    "We also use the *print_components* method to confirm our component was added successfully. Running this code block multiple times result in an error, as McStas does not allow two components with the same nickname."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "source Source_div AT (0, 0, 0) ABSOLUTE\n"
     ]
    }
   ],
   "source": [
    "src = instrument.add_component(\"source\", \"Source_div\")\n",
    "instrument.print_components()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Working with component objects\n",
    "The src object created by *add_component* can be used to modify the component. It also holds the information on the component, which can be shown by printing the object. This will tell us for example if any required parameters are yet to be set and the position of the component."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "COMPONENT source = Source_div\n",
      "  \u001b[1mxwidth\u001b[0m\u001b[91m : Required parameter not yet specified\u001b[0m\n",
      "  \u001b[1myheight\u001b[0m\u001b[91m : Required parameter not yet specified\u001b[0m\n",
      "  \u001b[1mfocus_aw\u001b[0m\u001b[91m : Required parameter not yet specified\u001b[0m\n",
      "  \u001b[1mfocus_ah\u001b[0m\u001b[91m : Required parameter not yet specified\u001b[0m\n",
      "AT [0, 0, 0] ABSOLUTE\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(src)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Modifying a component object\n",
    "The parameters of a component object can be modified as attributes. From the above print we know there are four required parameters, so we start by setting these and then print the resulting component status."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "COMPONENT source = Source_div\n",
      "  \u001b[1mxwidth\u001b[0m = \u001b[1m\u001b[92m0.1\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1myheight\u001b[0m = \u001b[1m\u001b[92m0.05\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1mfocus_aw\u001b[0m = \u001b[1m\u001b[92m1.2\u001b[0m\u001b[0m [deg]\n",
      "  \u001b[1mfocus_ah\u001b[0m = \u001b[1m\u001b[92m2.3\u001b[0m\u001b[0m [deg]\n",
      "AT [0, 0, 0] ABSOLUTE\n",
      "\n"
     ]
    }
   ],
   "source": [
    "src.xwidth = 0.1\n",
    "src.yheight = 0.05\n",
    "src.focus_aw = 1.2\n",
    "src.focus_ah = 2.3\n",
    "\n",
    "print(src)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Getting status of all parameters\n",
    "Printing a component only show the required parameters and user specified parameters, but it is also possible to see all parameters with the *show_parameters* method. This reminds us to set an energy or wavelength range for the source, as it is necessary to set one of these even though they are technically not required parameters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " ___ Help Source_div ________________________________________________________________\n",
      "|\u001b[1moptional parameter\u001b[0m|\u001b[1m\u001b[4mrequired parameter\u001b[0m\u001b[0m|\u001b[1m\u001b[94mdefault value\u001b[0m\u001b[0m|\u001b[1m\u001b[92muser specified value\u001b[0m\u001b[0m|\n",
      "\u001b[4m\u001b[1mxwidth\u001b[0m\u001b[0m = \u001b[1m\u001b[92m0.1\u001b[0m\u001b[0m [m] // Width of source\n",
      "\u001b[4m\u001b[1myheight\u001b[0m\u001b[0m = \u001b[1m\u001b[92m0.05\u001b[0m\u001b[0m [m] // Height of source\n",
      "\u001b[4m\u001b[1mfocus_aw\u001b[0m\u001b[0m = \u001b[1m\u001b[92m1.2\u001b[0m\u001b[0m [deg] // FWHM (Gaussian) or maximal (uniform) horz. width \n",
      "                        divergence \n",
      "\u001b[4m\u001b[1mfocus_ah\u001b[0m\u001b[0m = \u001b[1m\u001b[92m2.3\u001b[0m\u001b[0m [deg] // FWHM (Gaussian) or maximal (uniform) vert. height \n",
      "                        divergence \n",
      "\u001b[1mE0\u001b[0m = \u001b[1m\u001b[94m0.0\u001b[0m\u001b[0m [meV] // Mean energy of neutrons.\n",
      "\u001b[1mdE\u001b[0m = \u001b[1m\u001b[94m0.0\u001b[0m\u001b[0m [meV] // Energy half spread of neutrons.\n",
      "\u001b[1mlambda0\u001b[0m = \u001b[1m\u001b[94m0.0\u001b[0m\u001b[0m [Ang] // Mean wavelength of neutrons (only relevant for E0=0)\n",
      "\u001b[1mdlambda\u001b[0m = \u001b[1m\u001b[94m0.0\u001b[0m\u001b[0m [Ang] // Wavelength half spread of neutrons.\n",
      "\u001b[1mgauss\u001b[0m = \u001b[1m\u001b[94m0.0\u001b[0m\u001b[0m [0|1] // Criterion\n",
      "\u001b[1mflux\u001b[0m = \u001b[1m\u001b[94m1.0\u001b[0m\u001b[0m [1/(s cm 2 st energy_unit)] // flux per energy unit, Angs or meV\n",
      "-------------------------------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "src.show_parameters()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Adding an instrument parameter to control wavelength\n",
    "Controlling the wavelength range emitted by the source is best done with an instrument parameter, then this same parameter can be used to for example rotate a monochromator or set the range for an wavelength sensitive monitor. Adding an instrument parameter is done using the instrument method *add_parameter*, and it is possible to set a default value and comment. The method returns a parameter object that can be used to assign the parameter to a component. The current instrument parameters can be viewed with the *show_parameters* method on the isntrument object.\n",
    "\n",
    "The default type for instrument parameters is a double (floating point number), but other types can be selected if necessary by providing a type string before, here we also provide an example of an integer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    wavelength  = 5.0  // Wavelength in [Ang]\n",
      "int order       = 1    // Monochromator order, integer\n"
     ]
    }
   ],
   "source": [
    "wavelength = instrument.add_parameter(\"wavelength\", value=5.0,\n",
    "                                      comment=\"Wavelength in [Ang]\")\n",
    "\n",
    "order = instrument.add_parameter(\"int\", \"order\", value=1,\n",
    "                                 comment=\"Monochromator order, integer\")\n",
    "instrument.show_parameters()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now our source component can have its parameters assigned to a instrument parameter, or even a mathematical expression using the variable. This allows us to set a reasonable wavelength range for our source component."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "COMPONENT source = Source_div\n",
      "  \u001b[1mxwidth\u001b[0m = \u001b[1m\u001b[92m0.1\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1myheight\u001b[0m = \u001b[1m\u001b[92m0.05\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1mfocus_aw\u001b[0m = \u001b[1m\u001b[92m1.2\u001b[0m\u001b[0m [deg]\n",
      "  \u001b[1mfocus_ah\u001b[0m = \u001b[1m\u001b[92m2.3\u001b[0m\u001b[0m [deg]\n",
      "  \u001b[1mlambda0\u001b[0m = \u001b[1m\u001b[92mwavelength\u001b[0m\u001b[0m [Ang]\n",
      "  \u001b[1mdlambda\u001b[0m = \u001b[1m\u001b[92m0.01*wavelength\u001b[0m\u001b[0m [Ang]\n",
      "AT [0, 0, 0] ABSOLUTE\n",
      "\n"
     ]
    }
   ],
   "source": [
    "src.lambda0 = wavelength\n",
    "src.dlambda = \"0.01*wavelength\" # When performing math use a string and the parameter name\n",
    "print(src)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Using keyword arguments when adding a component\n",
    "When adding a component, several keyword arguments are available, for example for setting the position of the component.\n",
    "\n",
    "- AT set position with list of x,y,z coordinates\n",
    "- AT_RELATIVE set reference point for position (name of component instance or object)\n",
    "- ROTATED set rotation around x,y,z axis\n",
    "- ROTATED_RELATIVE set reference rotation (name of component instance or object)\n",
    "- RELATIVE set both reference position and rotation (name of component instance or object)\n",
    "\n",
    "We use this to set up a guide 2 meters after the source. The McStas coordinate system convention is such that the nominal beam direction is in the Z direction and with Y vertical against gravity. We use the component instance name as a string to refer to our source. The RELATIVE could also have been specified as src, which is our source object."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "guide = instrument.add_component(\"guide\", \"Guide_gravity\", AT=[0,0,2], RELATIVE=\"source\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next we set the parameters for our guide component."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "COMPONENT guide = Guide_gravity\n",
      "  \u001b[1mw1\u001b[0m = \u001b[1m\u001b[92m0.05\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1mh1\u001b[0m = \u001b[1m\u001b[92m0.05\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1mw2\u001b[0m = \u001b[1m\u001b[92m0.05\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1mh2\u001b[0m = \u001b[1m\u001b[92m0.05\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1ml\u001b[0m = \u001b[1m\u001b[92m8.0\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1mm\u001b[0m = \u001b[1m\u001b[92m3.5\u001b[0m\u001b[0m [1]\n",
      "  \u001b[1mG\u001b[0m = \u001b[1m\u001b[92m-9.82\u001b[0m\u001b[0m [m/s2]\n",
      "AT [0, 0, 2] RELATIVE source\n",
      "\n"
     ]
    }
   ],
   "source": [
    "guide.w1 = 0.05\n",
    "guide.w2 = 0.05\n",
    "guide.h1 = 0.05\n",
    "guide.h2 = 0.05\n",
    "guide.l = 8.0\n",
    "guide.m = 3.5\n",
    "guide.G = -9.82\n",
    "\n",
    "print(guide)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Adding calculations to an instrument file\n",
    "One of the advantages of McStas is the ease of adding calculations to the instrument. Here we calculate the rotation of a monochromator so that its scatters the wavelengths from our source. We need to declare variables using *add_declare_var* and append C code to initialize using *append_initialize*.\n",
    "\n",
    "For *add_declare_var* the first argument is the C type, usually double or int, the next is the variable name. A default value can be specified with the value keyword. Like when adding a parameter, a *add_declare* also returns an object that can be used to refer to this variable later.\n",
    "\n",
    "*append_initialize* just adds the given C code to the initialize section of the McStas instrument file. It is necessary to follow C syntax, for example remember semicolon at the end of statements."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "mono_Q = instrument.add_declare_var(\"double\", \"mono_Q\", value=1.714) # Q for Ge 311\n",
    "instrument.add_declare_var(\"double\", \"wavevector\")\n",
    "instrument.append_initialize(\"wavevector = 2.0*PI/wavelength;\")\n",
    "\n",
    "mono_rotation = instrument.add_declare_var(\"double\", \"mono_rotation\")\n",
    "instrument.append_initialize(\"mono_rotation = asin(mono_Q/(2.0*wavevector))*RAD2DEG;\")\n",
    "instrument.append_initialize('printf(\"monochromator rotation = %g deg\\\\n\", mono_rotation);')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Adding the monochromator\n",
    "Here the monochromator is added, and we use the declared variables *mono_Q* and *mono_rotation* prepared above. Setting position and rotation can also be done using the *set_AT* and *set_ROTATED* methods on the component objects. Here it is also demonstrated how one can use either component objects or component names for the relative keyword.\n",
    "\n",
    "Rotation is specified around each axis, so rotation of our monochromator should be around the Y axis in order to keep the beam in the usual X-Z plane."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "mono = instrument.add_component(\"mono\", \"Monochromator_flat\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "mono.zwidth = 0.05\n",
    "mono.yheight = 0.08\n",
    "mono.Q = mono_Q\n",
    "mono.set_AT([0, 0, 8.5], RELATIVE=guide)\n",
    "mono.set_ROTATED([0, mono_rotation, 0], RELATIVE=\"guide\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "COMPONENT mono = Monochromator_flat\n",
      "  \u001b[1mzwidth\u001b[0m = \u001b[1m\u001b[92m0.05\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1myheight\u001b[0m = \u001b[1m\u001b[92m0.08\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1mQ\u001b[0m = \u001b[1m\u001b[92mmono_Q\u001b[0m\u001b[0m [1/angstrom]\n",
      "AT [0, 0, 8.5] RELATIVE guide\n",
      "ROTATED [0, 'mono_rotation', 0] RELATIVE guide\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(mono)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Using an arm to define the beam direction\n",
    "As the beam changes direction at the monochromator, we wish to define the new direction to simplify adding latter components. This can be done with an Arm component, which performs no simulation but can be used as new coordinate reference. The outgoing direction correspond to one more rotation of *mono_rotation*."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "beam_direction = instrument.add_component(\"beam_dir\", \"Arm\", AT_RELATIVE=\"mono\")\n",
    "beam_direction.set_ROTATED([0, mono_rotation, 0], RELATIVE=\"mono\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Adding a sample\n",
    "We now add a powder sample using the PowderN component placed relative to our newly defiend beam direction. The chosen powder is Na2Ca3Al2F14 which is a standard sample due to its large number of available reflections."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "sample = instrument.add_component(\"sample\", \"PowderN\",\n",
    "                                  AT=[0, 0, 1.1], RELATIVE=beam_direction)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "sample.radius = 0.015\n",
    "sample.yheight = 0.05\n",
    "sample.reflections = '\"Na2Ca3Al2F14.laz\"'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "COMPONENT sample = PowderN\n",
      "  \u001b[1mreflections\u001b[0m = \u001b[1m\u001b[92m\"Na2Ca3Al2F14.laz\"\u001b[0m\u001b[0m []\n",
      "  \u001b[1mradius\u001b[0m = \u001b[1m\u001b[92m0.015\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1myheight\u001b[0m = \u001b[1m\u001b[92m0.05\u001b[0m\u001b[0m [m]\n",
      "AT [0, 0, 1.1] RELATIVE beam_dir\n",
      "\n"
     ]
    }
   ],
   "source": [
    "sample.print_long()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Adding a cylindrical monitor\n",
    "The flexible Monitor_nD component can be used to add a banana monitor (part of a cylinder). The component shape is specified using an option string. The restore_neutron parameter is set to 1 to allow other monitors to record each neutron.\n",
    "\n",
    "We have to specify a filename and option string here, and if we just use a string like \"banana.dat\" it would be interpreted as an instrument parameter called *banana.dat* and fail, so it is necessary to add single quotes around, '\"banana.dat\"'."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "banana = instrument.add_component(\"banana\", \"Monitor_nD\", RELATIVE=sample)\n",
    "banana.xwidth = 2.0\n",
    "banana.yheight = 0.3\n",
    "banana.restore_neutron = 1\n",
    "banana.filename = '\"banana.dat\"'\n",
    "banana.options = '\"theta limits=[5 175] bins=150, banana\"'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Adding a psd monitor\n",
    "We also add a simple PSD (position sensitive detector) monitor to see the transmitted beam."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "mon = instrument.add_component(\"monitor\", \"PSD_monitor\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "mon.nx = 100\n",
    "mon.ny = 100\n",
    "mon.filename = '\"psd.dat\"'\n",
    "mon.xwidth = 0.05\n",
    "mon.yheight = 0.08\n",
    "mon.restore_neutron = 1\n",
    "mon.set_AT([0,0,0.1], RELATIVE=sample)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Print the components contained in an instrument\n",
    "Before performing the simulation, it is a good idea to check that the instrument contains the expected components and that they are appropriately placed in space. The *print_components* method is useful for this purpose."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "source   Source_div         AT      (0, 0, 0)             ABSOLUTE         \n",
      "guide    Guide_gravity      AT      (0, 0, 2)             RELATIVE source  \n",
      "mono     Monochromator_flat AT      (0, 0, 8.5)           RELATIVE guide    \n",
      "                            ROTATED (0, mono_rotation, 0) RELATIVE guide\n",
      "beam_dir Arm                AT      (0, 0, 0)             RELATIVE mono     \n",
      "                            ROTATED (0, mono_rotation, 0) RELATIVE mono\n",
      "sample   PowderN            AT      (0, 0, 1.1)           RELATIVE beam_dir\n",
      "banana   Monitor_nD         AT      (0, 0, 0)             RELATIVE sample  \n",
      "monitor  PSD_monitor        AT      (0, 0, 0.1)           RELATIVE sample  \n"
     ]
    }
   ],
   "source": [
    "instrument.print_components()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Running the simulation\n",
    "Running the simulation is done in three steps\n",
    "\n",
    "- Setting the parameters with *set_parameters*\n",
    "- Setting the settings with *settings*\n",
    "- Running the McStas simulation with *backengine*\n",
    "\n",
    "The *set_parameters* method takes a value for each of the parameters defined in the instrument, here wavelength.\n",
    "\n",
    "Settings adjust settings for the simulations, a few examples can be seen here\n",
    "\n",
    "- ncount sets the number of rays\n",
    "- mpi sets the number of CPU cores used for execution (requires mpi installed)\n",
    "- output_path sets the name of the output folder\n",
    "- increment_folder_name if set to True, automatically changes the foldername if it already exists (default).\n",
    "\n",
    "The *backengine* method takes no parameters and just performs the simulation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    wavelength  = 2.8  // Wavelength in [Ang]\n",
      "int order       = 1    // Monochromator order, integer\n"
     ]
    }
   ],
   "source": [
    "instrument.set_parameters(wavelength=2.8)\n",
    "instrument.show_parameters()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Instrument settings:\n",
      "  ncount:           5.00e+06\n",
      "  output_path:      data_folder/mcstas_basics\n",
      "  run_path:         run_folder\n",
      "  package_path:     /Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1\n",
      "  executable_path:  /Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1/bin/\n",
      "  executable:       mcrun\n",
      "  force_compile:    True\n"
     ]
    }
   ],
   "source": [
    "instrument.settings(ncount=5E6, output_path=\"data_folder/mcstas_basics\")\n",
    "instrument.show_settings()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "tags": [
     "scroll-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO: Using directory: \"/Users/madsbertelsen/PaNOSC/McStasScript/github/McStasScript/docs/source/tutorial/data_folder/mcstas_basics_7\"\n",
      "INFO: Regenerating c-file: python_tutorial.c\n",
      "CFLAGS=\n",
      "INFO: Recompiling: ./python_tutorial.out\n",
      "mccode-r.c:2837:3: warning: expression result unused [-Wunused-value]\n",
      "  *t0;\n",
      "  ^~~\n",
      "1 warning generated.\n",
      "INFO: ===\n",
      "Warning: 64538 events were removed in Component[7] monitor=PSD_monitor()\n",
      "         (negative time, miss next components, rounding errors, Nan, Inf).\n",
      "INFO: Placing instr file copy python_tutorial.instr in dataset /Users/madsbertelsen/PaNOSC/McStasScript/github/McStasScript/docs/source/tutorial/data_folder/mcstas_basics_7\n",
      "\n",
      "      monochromator rotation = 22.4519 deg\n",
      "Opening input file '/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//data/Na2Ca3Al2F14.laz' (Table_Read_Offset)\n",
      "Table from file 'Na2Ca3Al2F14.laz' (block 1) is 841 x 18 (x=1:20), constant step. interpolation: linear\n",
      "  '# TITLE *-Na2Ca3Al2F14-[I213] Courbion, G.;Ferey, G.[1988] Standard NAC cal ...'\n",
      "PowderN: sample: Reading 841 rows from Na2Ca3Al2F14.laz\n",
      "PowderN: sample: Read 841 reflections from file 'Na2Ca3Al2F14.laz'\n",
      "PowderN: sample: Vc=1079.1 [Angs] sigma_abs=11.7856 [barn] sigma_inc=13.6704 [barn] reflections=Na2Ca3Al2F14.laz\n",
      "Detector: banana_I=1.35081e-06 banana_ERR=2.24941e-08 banana_N=10752 \"banana.dat\"\n",
      "Detector: monitor_I=4.07521e-05 monitor_ERR=2.69874e-07 monitor_N=49651 \"psd.dat\"\n",
      "PowderN: sample: Info: you may highly improve the computation efficiency by using\n",
      "    SPLIT 47 COMPONENT sample=PowderN(...)\n",
      "  in the instrument description python_tutorial.instr.\n",
      "loading system configuration\n",
      "\n"
     ]
    }
   ],
   "source": [
    "instrument.backengine() # Perform simulation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = instrument.data # The data is available in the data attribute"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plotting the data\n",
    "The *run_full_instrument* method returned a list of McStasData objects which can be plotted by the McStasScript plotter module. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Plotting data with name banana\n",
      "Plotting data with name monitor\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x504 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plotter.make_sub_plot(data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Adjusting plots\n",
    "The McStasData objects contain preferences for how the data should be plotted, which can be modified using the functions module and the *name_plot_options* function. The function arguments are the name of the monitor component and a list of McStasData objects, then options are provided with the keyword arguments.\n",
    "\n",
    "The following plot options are often useful:\n",
    "- log [True or False] For plotting on logarithmic axis\n",
    "- orders_of_mag [number] When using logarithmic plotting, limits the maximum orders of magnitudes shown\n",
    "- left_lim [number] lower limit of plot x axis\n",
    "- right_lim [number] upper limit of plot x axis\n",
    "- bottom_lim [number] lower limit of plot y axis\n",
    "- top_lim [number] upper limit of plot y axis\n",
    "- colormap [string] name of matplotlib colormap to use"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Plotting data with name banana\n",
      "Plotting data with name monitor\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 936x504 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "functions.name_plot_options(\"monitor\", data, log=True)\n",
    "functions.name_plot_options(\"banana\", data, left_lim=90, right_lim=150)\n",
    "plotter.make_sub_plot(data, fontsize=16)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Behind the scenes \n",
    "McStasScript writes the instrument file and uses mcrun to compile and run it. The file can be found in the input_path selected when the instrument object were created. We can print it here to see what was done behind the scenes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/********************************************************************************\n",
      "* \n",
      "* McStas, neutron ray-tracing package\n",
      "*         Copyright (C) 1997-2008, All rights reserved\n",
      "*         Risoe National Laboratory, Roskilde, Denmark\n",
      "*         Institut Laue Langevin, Grenoble, France\n",
      "* \n",
      "* This file was written by McStasScript, which is a \n",
      "* python based McStas instrument generator written by \n",
      "* Mads Bertelsen in 2019 while employed at the \n",
      "* European Spallation Source Data Management and \n",
      "* Software Center\n",
      "* \n",
      "* Instrument python_tutorial\n",
      "* \n",
      "* %Identification\n",
      "* Written by: Python McStas Instrument Generator\n",
      "* Date: 11:20:52 on January 07, 2022\n",
      "* Origin: ESS DMSC\n",
      "* %INSTRUMENT_SITE: Generated_instruments\n",
      "* \n",
      "* \n",
      "* %Parameters\n",
      "* \n",
      "* %End \n",
      "********************************************************************************/\n",
      "\n",
      "DEFINE INSTRUMENT python_tutorial (\n",
      "wavelength = 2.8, // Wavelength in [Ang]\n",
      "int order = 1 // Monochromator order, integer\n",
      ")\n",
      "\n",
      "DECLARE \n",
      "%{\n",
      "double mono_Q = 1.714;\n",
      "double wavevector;\n",
      "double mono_rotation;\n",
      "%}\n",
      "\n",
      "INITIALIZE \n",
      "%{\n",
      "// Start of initialize for generated python_tutorial\n",
      "wavevector = 2.0*PI/wavelength;\n",
      "mono_rotation = asin(mono_Q/(2.0*wavevector))*RAD2DEG;\n",
      "printf(\"monochromator rotation = %g deg\\n\", mono_rotation);\n",
      "%}\n",
      "\n",
      "TRACE \n",
      "COMPONENT source = Source_div(\n",
      " xwidth = 0.1, yheight = 0.05,\n",
      " focus_aw = 1.2, focus_ah = 2.3,\n",
      " lambda0 = wavelength, dlambda = 0.01*wavelength)\n",
      "AT (0,0,0) ABSOLUTE\n",
      "\n",
      "COMPONENT guide = Guide_gravity(\n",
      " w1 = 0.05, h1 = 0.05,\n",
      " w2 = 0.05, h2 = 0.05,\n",
      " l = 8, m = 3.5,\n",
      " G = -9.82)\n",
      "AT (0,0,2) RELATIVE source\n",
      "\n",
      "COMPONENT mono = Monochromator_flat(\n",
      " zwidth = 0.05, yheight = 0.08,\n",
      " Q = mono_Q)\n",
      "AT (0,0,8.5) RELATIVE guide\n",
      "ROTATED (0,mono_rotation,0) RELATIVE guide\n",
      "\n",
      "COMPONENT beam_dir = Arm()\n",
      "AT (0,0,0) RELATIVE mono\n",
      "ROTATED (0,mono_rotation,0) RELATIVE mono\n",
      "\n",
      "COMPONENT sample = PowderN(\n",
      " reflections = \"Na2Ca3Al2F14.laz\", radius = 0.015,\n",
      " yheight = 0.05)\n",
      "AT (0,0,1.1) RELATIVE beam_dir\n",
      "\n",
      "COMPONENT banana = Monitor_nD(\n",
      " xwidth = 2, yheight = 0.3,\n",
      " restore_neutron = 1, options = \"theta limits=[5 175] bins=150, banana\",\n",
      " filename = \"banana.dat\")\n",
      "AT (0,0,0) RELATIVE sample\n",
      "\n",
      "COMPONENT monitor = PSD_monitor(\n",
      " nx = 100, ny = 100,\n",
      " filename = \"psd.dat\", xwidth = 0.05,\n",
      " yheight = 0.08, restore_neutron = 1)\n",
      "AT (0,0,0.1) RELATIVE sample\n",
      "\n",
      "FINALLY \n",
      "%{\n",
      "// Start of finally for generated python_tutorial\n",
      "%}\n",
      "\n",
      "END\n",
      "\n"
     ]
    }
   ],
   "source": [
    "with open(\"run_folder/python_tutorial.instr\") as file:\n",
    "    data = file.read()\n",
    "    print(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "celltoolbar": "Tags",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
