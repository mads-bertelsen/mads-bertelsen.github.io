{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# The Union components\n",
    "This tutorial is the first in a series showing how the Union components are used. This notebook focuses on setting up material definitions that are used to provide scattering physics to geometries. There are several kinds of Union components, and they need to be used in conjunction with one another to function.\n",
    "- Process components: Describe individual scattering phenomena, such as incoherent, powder, single crystal scattering\n",
    "- Make_material component: Joins several processes into a material definition\n",
    "- Geometry components: Describe geometry, each is assigned a material definition\n",
    "- Union logger components: Records information for each scattering event and plots it\n",
    "- Union abs logger components: Records information for each absorption event and plots it\n",
    "- Union conditional components: Modifies a logger or abs logger so it only records when certain final condition met\n",
    "- Union master component: Performs simulation described by previous Union components\n",
    "\n",
    "In this notebook we will focus on setting up materials using process components and the *Union_make_material* component, but the Union components can not work individually, so it will also be necessary to add a geometry and the *Union_master*. First we import McStasScript and create a new instrument object.\n",
    "\n",
    "In case of any issues with running the tutorial notebooks there is troubleshooting at the end of this notebook."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from mcstasscript.interface import instr, functions, plotter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "instrument = instr.McStas_instr(\"python_tutorial\", input_path=\"run_folder\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Process components\n",
    "In this notebook we will focus on exploring how to build different physical descriptions of materials, and checking that they behave as expected. We start by looking at the process component for incoherent scattering, Incoherent_process."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Here are all components in the Work directory category.\n",
      "No components found in this category! Available categories:\n",
      " sources\n",
      " optics\n",
      " samples\n",
      " monitors\n",
      " misc\n",
      " contrib\n",
      " union\n",
      " obsolete\n"
     ]
    }
   ],
   "source": [
    "instrument.show_components(\"Work directory\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " ___ Help Incoherent_process ________________________________________________________\n",
      "|\u001b[1moptional parameter\u001b[0m|\u001b[1m\u001b[4mrequired parameter\u001b[0m\u001b[0m|\u001b[1m\u001b[94mdefault value\u001b[0m\u001b[0m|\u001b[1m\u001b[92muser specified value\u001b[0m\u001b[0m|\n",
      "\u001b[1msigma\u001b[0m = \u001b[1m\u001b[94m5.08\u001b[0m\u001b[0m [barns] // Incoherent scattering cross section\n",
      "\u001b[1mf_QE\u001b[0m = \u001b[1m\u001b[94m0.0\u001b[0m\u001b[0m [1] // Fraction of quasielastic scattering (rest is elastic)\n",
      "\u001b[1mgamma\u001b[0m = \u001b[1m\u001b[94m0.0\u001b[0m\u001b[0m [1] // Lorentzian width of quasielastic broadening (HWHM)\n",
      "\u001b[1mpacking_factor\u001b[0m = \u001b[1m\u001b[94m1.0\u001b[0m\u001b[0m [1] // How dense is the material compared to optimal 0-1\n",
      "\u001b[1munit_cell_volume\u001b[0m = \u001b[1m\u001b[94m13.8\u001b[0m\u001b[0m [AA^3] // Unit_cell_volume\n",
      "\u001b[1minteract_fraction\u001b[0m = \u001b[1m\u001b[94m-1.0\u001b[0m\u001b[0m [1] // How large a part of the scattering events \n",
      "                                should use this process 0-1 (sum of all processes \n",
      "                                in material = 1) \n",
      "-------------------------------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "instrument.component_help(\"Incoherent_process\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The process components in general have few parameters as they just describe a single physical phenomena. The incoherent process here is described adequately by just the cross section *sigma* and volume of the unit cell, *unit_cell_volume*.\n",
    "\n",
    "Two parameters are available for all processes, *packing_factor* and *interact_fraction*. The packing factor describes how dense the material is, and can make it easier to mix for example different powders. It is implemented as a simple factor on the scattering strength. The interact fraction is used to balance many processes when they are used in one material. Normally processes are sampled according to they natural probability for scattering, but this can be overwritten using the *interact_fraction*, which provides the sampling probability directly, they just have to sum to 1 within a material."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "incoherent = instrument.add_component(\"incoherent\", \"Incoherent_process\")\n",
    "incoherent.sigma = 2.5\n",
    "incoherent.unit_cell_volume = 13.8"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Making a material\n",
    "In order to collect processes into a material, one uses the *Union_make_material* component. Here are the parameters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " ___ Help Union_make_material _______________________________________________________\n",
      "|\u001b[1moptional parameter\u001b[0m|\u001b[1m\u001b[4mrequired parameter\u001b[0m\u001b[0m|\u001b[1m\u001b[94mdefault value\u001b[0m\u001b[0m|\u001b[1m\u001b[92muser specified value\u001b[0m\u001b[0m|\n",
      "\u001b[1mprocess_string\u001b[0m = \u001b[1m\u001b[94m\"NULL\"\u001b[0m\u001b[0m [string] // Comma seperated names of physical processes\n",
      "\u001b[4m\u001b[1mmy_absorption\u001b[0m\u001b[0m [1/m] // Inverse penetration depth from absorption at standard \n",
      "                       energy \n",
      "\u001b[1mabsorber\u001b[0m = \u001b[1m\u001b[94m0.0\u001b[0m\u001b[0m [0/1] // Control parameter, if set to 1 the material will have \n",
      "                        no scattering processes \n",
      "-------------------------------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "instrument.component_help(\"Union_make_material\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A material definition thus consists of a number of processes given with the *process_string* parameter, and a description of the absorption in the material given with the inverse penetration depth at the standard neutron speed of 2200 m/s. For our first test material, lets just set absorption to zero and set our process_string to incoherent, referring to the process we created above.\n",
    "\n",
    "The name of the material is now inc_material, which will be used in the future to refer to this material."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "inc_material = instrument.add_component(\"inc_material\", \"Union_make_material\")\n",
    "inc_material.my_absorption = 0.0\n",
    "inc_material.process_string = '\"incoherent\"'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If the material contains no physical processes, it is necessary to set the *absorber* parameter to 1, as it will just have an absorption description. Here we make a material called abs_material. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "absorber = instrument.add_component(\"abs_material\", \"Union_make_material\")\n",
    "absorber.absorber = 1\n",
    "absorber.my_absorption = 3.0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The primary reason for having both process components and a make_material component is that it is possible to add as many processes in one material as necessary. Here we create a powder process, and then make a material using the powder and previously defined incoherent processes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "powder = instrument.add_component(\"powder\", \"Powder_process\")\n",
    "powder.reflections = '\"Cu.laz\"'\n",
    "\n",
    "inc_material = instrument.add_component(\"powder_material\", \"Union_make_material\")\n",
    "inc_material.my_absorption = 1.2\n",
    "inc_material.process_string = '\"incoherent,powder\"'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "At this point we have three materials defined\n",
    "\n",
    "| Material name   | Description                                                      |\n",
    "|-----------------|------------------------------------------------------------------|\n",
    "| inc_material    | Has one incoherent process and no absorption                     |\n",
    "| abs_material    | Only has absorption                                              |\n",
    "| powder_material | Has both incoherent and powder process in addition to absorption |\n",
    "\n",
    "Let us defined a quick test instrument to see these materials are behaving as expected. First we add a source."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "src = instrument.add_component(\"source\", \"Source_div\")\n",
    "\n",
    "source_width = instrument.add_parameter(\"source_width\", value=0.15, comment=\"Width of source in [m]\")\n",
    "src.xwidth = source_width\n",
    "src.yheight = 0.03\n",
    "src.focus_aw = 0.01\n",
    "src.focus_ah = 0.01\n",
    "\n",
    "src.lambda0 = instrument.add_parameter(\"wavelength\", value=5.0, comment=\"Wavelength in [Ang]\")\n",
    "src.dlambda = \"0.001*wavelength\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Adding geometries that use the material definitions\n",
    "Here we add three boxes, each using a different material definition and placed next to one another. The *material_string* parameter is used to specify the material name. The *priority* parameter will be explained later, as it is only important when geometries overlap, here they are spatially separated, yet the priorties must still be unique.\n",
    "\n",
    "It is important to note that these three boxes will be simulated simultaneously in the McStas simulation flow, so no need for GROUP statements to have these in parallel. Because they are simulated simultaneously, a ray can go from one to another, which would not be possible with a standard GROUP."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "box_inc = instrument.add_component(\"box_inc\", \"Union_box\", AT=[0.04,0,1], RELATIVE=src)\n",
    "box_inc.xwidth = 0.03\n",
    "box_inc.yheight = 0.03\n",
    "box_inc.zdepth = 0.03\n",
    "box_inc.material_string = '\"inc_material\"'\n",
    "box_inc.priority = 10\n",
    "\n",
    "box_inc = instrument.add_component(\"box_powder\", \"Union_box\", AT=[0,0,1], RELATIVE=src)\n",
    "box_inc.xwidth = 0.03\n",
    "box_inc.yheight = 0.03\n",
    "box_inc.zdepth = 0.01\n",
    "box_inc.material_string = '\"powder_material\"'\n",
    "box_inc.priority = 11\n",
    "\n",
    "box_inc = instrument.add_component(\"box_abs\", \"Union_box\", AT=[-0.04,0,1], RELATIVE=src)\n",
    "box_inc.xwidth = 0.03\n",
    "box_inc.yheight = 0.03\n",
    "box_inc.zdepth = 0.03\n",
    "box_inc.material_string = '\"abs_material\"'\n",
    "box_inc.priority = 12"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Adding loggers that show scattering and absorption\n",
    "In order to check the three materials behave as expected, we add spatial loggers for scattering and absorption. These are called loggers and abs_loggers, here is the parameters for a logger."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " ___ Help Union_logger_2D_space _____________________________________________________\n",
      "|\u001b[1moptional parameter\u001b[0m|\u001b[1m\u001b[4mrequired parameter\u001b[0m\u001b[0m|\u001b[1m\u001b[94mdefault value\u001b[0m\u001b[0m|\u001b[1m\u001b[92muser specified value\u001b[0m\u001b[0m|\n",
      "\u001b[1mtarget_geometry\u001b[0m = \u001b[1m\u001b[94m\"NULL\"\u001b[0m\u001b[0m [string] // Comma seperated list of geometry names \n",
      "                                     that will be logged, leave empty for all \n",
      "                                     volumes (even not defined yet) \n",
      "\u001b[1mtarget_process\u001b[0m = \u001b[1m\u001b[94m\"NULL\"\u001b[0m\u001b[0m [string] // Comma seperated names of physical \n",
      "                                    processes, if volumes are selected, one can \n",
      "                                    select Union_process names \n",
      "\u001b[1mD_direction_1\u001b[0m = \u001b[1m\u001b[94m\"x\"\u001b[0m\u001b[0m [string] // Direction for first axis (\"x\", \"y\" or \"z\")\n",
      "\u001b[1mD1_min\u001b[0m = \u001b[1m\u001b[94m-5.0\u001b[0m\u001b[0m [1] // histogram boundery, min position value for first axis\n",
      "\u001b[1mD1_max\u001b[0m = \u001b[1m\u001b[94m5.0\u001b[0m\u001b[0m [1] // histogram boundery, max position value for first axis\n",
      "\u001b[1mn1\u001b[0m = \u001b[1m\u001b[94m90.0\u001b[0m\u001b[0m [1] // number of bins for first axis\n",
      "\u001b[1mD_direction_2\u001b[0m = \u001b[1m\u001b[94m\"z\"\u001b[0m\u001b[0m [string] // Direction for second axis (\"x\", \"y\" or \"z\")\n",
      "\u001b[1mD2_min\u001b[0m = \u001b[1m\u001b[94m-5.0\u001b[0m\u001b[0m [1] // histogram boundery, min position value for second axis\n",
      "\u001b[1mD2_max\u001b[0m = \u001b[1m\u001b[94m5.0\u001b[0m\u001b[0m [1] // histogram boundery, max position value for second axis\n",
      "\u001b[1mn2\u001b[0m = \u001b[1m\u001b[94m90.0\u001b[0m\u001b[0m [1] // number of bins for second axis\n",
      "\u001b[1mfilename\u001b[0m = \u001b[1m\u001b[94m\"NULL\"\u001b[0m\u001b[0m [string] // Filename for logging output\n",
      "\u001b[1morder_total\u001b[0m = \u001b[1m\u001b[94m0.0\u001b[0m\u001b[0m [1] // Only log rays that scatter for the n'th time, 0 for \n",
      "                         all orders \n",
      "\u001b[1morder_volume\u001b[0m = \u001b[1m\u001b[94m0.0\u001b[0m\u001b[0m [1] // Only log rays that scatter for the n'th time in the \n",
      "                          same geometry \n",
      "\u001b[1morder_volume_process\u001b[0m = \u001b[1m\u001b[94m0.0\u001b[0m\u001b[0m [1] // Only log rays that scatter for the n'th time \n",
      "                                  in the same geometry, using the same process \n",
      "\u001b[1mlogger_conditional_extend_index\u001b[0m = \u001b[1m\u001b[94m-1.0\u001b[0m\u001b[0m [1] // If a conditional is used with \n",
      "                                              this logger, the result of each \n",
      "                                              conditional calculation can be made \n",
      "                                              available in extend as a array called \n",
      "                                              \"logger_conditional_extend\", and one \n",
      "                                              would then acces \n",
      "                                              logger_conditional_extend[n] if \n",
      "                                              logger_conditional_extend_index is \n",
      "                                              set to n \n",
      "-------------------------------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "instrument.component_help(\"Union_logger_2D_space\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The parameters for the abs_logger are very similar, so the two are added here."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "logger = instrument.add_component(\"logger_space\", \"Union_logger_2D_space\", RELATIVE=\"box_powder\")\n",
    "logger.D_direction_1 = '\"z\"'\n",
    "logger.D1_min = -0.04\n",
    "logger.D1_max = 0.04\n",
    "logger.n1 = 250\n",
    "logger.D_direction_2 = '\"x\"'\n",
    "logger.D2_min = -0.075\n",
    "logger.D2_max = 0.075\n",
    "logger.n2 = 400\n",
    "logger.filename = '\"logger.dat\"'\n",
    "\n",
    "logger = instrument.add_component(\"abs_logger_space\", \"Union_abs_logger_2D_space\", RELATIVE=\"box_powder\")\n",
    "logger.D_direction_1 = '\"z\"'\n",
    "logger.D1_min = -0.04\n",
    "logger.D1_max = 0.04\n",
    "logger.n1 = 250\n",
    "logger.D_direction_2 = '\"x\"'\n",
    "logger.D2_min = -0.075\n",
    "logger.D2_max = 0.075\n",
    "logger.n2 = 400\n",
    "logger.filename = '\"abs_logger.dat\"'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Adding the Union master component\n",
    "The Union master component is what actually executes the simulation, and so it takes information from all Union components defined before and performs the described simulation. This is the component that matters in terms of order of execution within the sequence of McStas components. As all the previous components have described the what the master component should simulate, it has no required parameters. It also does not matter where it is located in space, as it will grab the locations described by all previous Union components that need a spatial location, such as the geometries and loggers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " ___ Help Union_master ______________________________________________________________\n",
      "|\u001b[1moptional parameter\u001b[0m|\u001b[1m\u001b[4mrequired parameter\u001b[0m\u001b[0m|\u001b[1m\u001b[94mdefault value\u001b[0m\u001b[0m|\u001b[1m\u001b[92muser specified value\u001b[0m\u001b[0m|\n",
      "\u001b[1mverbal\u001b[0m = \u001b[1m\u001b[94m1.0\u001b[0m\u001b[0m [bool] // Toogles terminal output describing the defined simulation\n",
      "\u001b[1mlist_verbal\u001b[0m = \u001b[1m\u001b[94m0.0\u001b[0m\u001b[0m [bool] // Toogles information of all internal lists in \n",
      "                            intersection network \n",
      "\u001b[1mfinally_verbal\u001b[0m = \u001b[1m\u001b[94m0.0\u001b[0m\u001b[0m [bool] // Toogles information about cleanup performed in \n",
      "                               finally section \n",
      "\u001b[1mallow_inside_start\u001b[0m = \u001b[1m\u001b[94m0.0\u001b[0m\u001b[0m [bool] // Set to 1 to allow rays to start inside the \n",
      "                                   defined geometry \n",
      "\u001b[1menable_tagging\u001b[0m = \u001b[1m\u001b[94m0.0\u001b[0m\u001b[0m [bool] // Enable tagging of ray history (geometry, \n",
      "                               scattering process) \n",
      "\u001b[1mhistory_limit\u001b[0m = \u001b[1m\u001b[94m300000.0\u001b[0m\u001b[0m [bool] // Limit the number of unique histories that \n",
      "                                   are saved \n",
      "\u001b[1menable_conditionals\u001b[0m = \u001b[1m\u001b[94m1.0\u001b[0m\u001b[0m [bool] // Use conditionals with this master\n",
      "\u001b[1minherit_number_of_scattering_events\u001b[0m = \u001b[1m\u001b[94m0.0\u001b[0m\u001b[0m [bool] // Inherit the number of \n",
      "                                                    scattering events from last \n",
      "                                                    master \n",
      "\u001b[1mrecord_absorption\u001b[0m = \u001b[1m\u001b[94m0.0\u001b[0m\u001b[0m [bool] // Toggles logging of absorption\n",
      "-------------------------------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "instrument.component_help(\"Union_master\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "master = instrument.add_component(\"master\", \"Union_master\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Running the simulation\n",
    "Here the McStas simulation is executed as normal."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "tags": [
     "scroll-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Instrument settings:\n",
      "  ncount:           5.00e+06\n",
      "  output_path:      data_folder/union_materials\n",
      "  run_path:         run_folder\n",
      "  package_path:     /Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1\n",
      "  executable_path:  /Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1/bin/\n",
      "  executable:       mcrun\n",
      "  force_compile:    True\n",
      "INFO: Using directory: \"/Users/madsbertelsen/PaNOSC/McStasScript/github/McStasScript/tutorial/data_folder/union_materials_5\"\n",
      "INFO: Regenerating c-file: python_tutorial.c\n",
      "CFLAGS= -I@MCCODE_LIB@/share/\n",
      "INFO: Recompiling: ./python_tutorial.out\n",
      "mccode-r.c:2837:3: warning: expression result unused [-Wunused-value]\n",
      "  *t0;\n",
      "  ^~~\n",
      "In file included from /Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//contrib/union/Incoherent_process.comp:65:\n",
      "/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//share/Union_functions.c:1604:105: warning: incompatible pointer types passing 'int (const struct saved_history_struct *, const struct saved_history_struct *)' to parameter of type 'int (* _Nonnull)(const void *, const void *)' [-Wincompatible-pointer-types]\n",
      "  qsort(total_history.saved_histories,total_history.used_elements,sizeof (struct saved_history_struct), Sample_compare_history_intensities);\n",
      "                                                                                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/usr/include/stdlib.h:161:22: note: passing argument to parameter '__compar' here\n",
      "            int (* _Nonnull __compar)(const void *, const void *));\n",
      "                            ^\n",
      "In file included from /Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//contrib/union/Incoherent_process.comp:65:\n",
      "/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//share/Union_functions.c:1613:20: warning: incompatible pointer types passing 'struct saved_history_struct *' to parameter of type 'struct dynamic_history_list *' [-Wincompatible-pointer-types]\n",
      "    printf_history(&total_history.saved_histories[history_iterate]);\n",
      "                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "mccode-r.h:219:27: note: expanded from macro 'MPI_MASTER'\n",
      "#define MPI_MASTER(instr) instr\n",
      "                          ^~~~~\n",
      "/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//share/Union_functions.c:1434:50: note: passing argument to parameter 'history' here\n",
      "void printf_history(struct dynamic_history_list *history) {\n",
      "                                                 ^\n",
      "In file included from /Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//contrib/union/Incoherent_process.comp:65:\n",
      "In file included from /Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//share/Union_functions.c:2030:\n",
      "/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//share/Geometry_functions.c:839:1: warning: non-void function does not return a value in all control paths [-Wreturn-type]\n",
      "};\n",
      "^\n",
      "/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//share/Geometry_functions.c:883:1: warning: non-void function does not return a value [-Wreturn-type]\n",
      "};\n",
      "^\n",
      "/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//share/Geometry_functions.c:3274:42: warning: if statement has empty body [-Wempty-body]\n",
      "    if (dist_to_corner > sphere_2_radius); { sphere_2_radius = dist_to_corner ; }\n",
      "                                         ^\n",
      "/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//share/Geometry_functions.c:3274:42: note: put the semicolon on a separate line to silence this warning\n",
      "/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//share/Geometry_functions.c:3276:42: warning: if statement has empty body [-Wempty-body]\n",
      "    if (dist_to_corner > sphere_2_radius); { sphere_2_radius = dist_to_corner ; }\n",
      "                                         ^\n",
      "/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//share/Geometry_functions.c:3276:42: note: put the semicolon on a separate line to silence this warning\n",
      "/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//share/Geometry_functions.c:3278:42: warning: if statement has empty body [-Wempty-body]\n",
      "    if (dist_to_corner > sphere_2_radius); { sphere_2_radius = dist_to_corner ; }\n",
      "                                         ^\n",
      "/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//share/Geometry_functions.c:3278:42: note: put the semicolon on a separate line to silence this warning\n",
      "/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//share/Geometry_functions.c:3280:42: warning: if statement has empty body [-Wempty-body]\n",
      "    if (dist_to_corner > sphere_2_radius); { sphere_2_radius = dist_to_corner ; }\n",
      "                                         ^\n",
      "/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//share/Geometry_functions.c:3280:42: note: put the semicolon on a separate line to silence this warning\n",
      "/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//contrib/union/Union_logger_2D_space.comp:574:45: warning: format string is not a string literal (potentially insecure) [-Wformat-security]\n",
      "  sprintf(this_storage.Detector_2D.Filename,filename);\n",
      "                                            ^~~~~~~~\n",
      "./python_tutorial.c:17318:18: note: expanded from macro 'filename'\n",
      "#define filename mcclogger_space_filename\n",
      "                 ^~~~~~~~~~~~~~~~~~~~~~~~\n",
      "/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/usr/include/secure/_stdio.h:47:56: note: expanded from macro 'sprintf'\n",
      "  __builtin___sprintf_chk (str, 0, __darwin_obsz(str), __VA_ARGS__)\n",
      "                                                       ^~~~~~~~~~~\n",
      "/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//contrib/union/Union_logger_2D_space.comp:574:45: note: treat the string as an argument to avoid this\n",
      "  sprintf(this_storage.Detector_2D.Filename,filename);\n",
      "                                            ^\n",
      "                                            \"%s\", \n",
      "./python_tutorial.c:17318:18: note: expanded from macro 'filename'\n",
      "#define filename mcclogger_space_filename\n",
      "                 ^\n",
      "/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/usr/include/secure/_stdio.h:47:56: note: expanded from macro 'sprintf'\n",
      "  __builtin___sprintf_chk (str, 0, __darwin_obsz(str), __VA_ARGS__)\n",
      "                                                       ^\n",
      "/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//contrib/union/Union_abs_logger_2D_space.comp:543:49: warning: format string is not a string literal (potentially insecure) [-Wformat-security]\n",
      "  sprintf(this_abs_storage.Detector_2D.Filename,filename);\n",
      "                                                ^~~~~~~~\n",
      "./python_tutorial.c:17560:18: note: expanded from macro 'filename'\n",
      "#define filename mccabs_logger_space_filename\n",
      "                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/usr/include/secure/_stdio.h:47:56: note: expanded from macro 'sprintf'\n",
      "  __builtin___sprintf_chk (str, 0, __darwin_obsz(str), __VA_ARGS__)\n",
      "                                                       ^~~~~~~~~~~\n",
      "/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//contrib/union/Union_abs_logger_2D_space.comp:543:49: note: treat the string as an argument to avoid this\n",
      "  sprintf(this_abs_storage.Detector_2D.Filename,filename);\n",
      "                                                ^\n",
      "                                                \"%s\", \n",
      "./python_tutorial.c:17560:18: note: expanded from macro 'filename'\n",
      "#define filename mccabs_logger_space_filename\n",
      "                 ^\n",
      "/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/usr/include/secure/_stdio.h:47:56: note: expanded from macro 'sprintf'\n",
      "  __builtin___sprintf_chk (str, 0, __darwin_obsz(str), __VA_ARGS__)\n",
      "                                                       ^\n",
      "/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//contrib/union/Union_master.comp:788:15: warning: expression result unused [-Wunused-value]\n",
      "          if (volume_index_main,Volumes[volume_index_main]->geometry.is_mask_volume == 0 ||\n",
      "              ^~~~~~~~~~~~~~~~~\n",
      "mccode-r.h:219:27: note: expanded from macro 'MPI_MASTER'\n",
      "#define MPI_MASTER(instr) instr\n",
      "                          ^~~~~\n",
      "/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//contrib/union/Union_master.comp:788:90: warning: expression result unused [-Wunused-value]\n",
      "          if (volume_index_main,Volumes[volume_index_main]->geometry.is_mask_volume == 0 ||\n",
      "          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~\n",
      "mccode-r.h:219:27: note: expanded from macro 'MPI_MASTER'\n",
      "#define MPI_MASTER(instr) instr\n",
      "                          ^~~~~\n",
      "/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//contrib/union/Union_master.comp:789:92: warning: expression result unused [-Wunused-value]\n",
      "              volume_index_main,Volumes[volume_index_main]->geometry.is_masked_volume == 0 ||\n",
      "              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~\n",
      "mccode-r.h:219:27: note: expanded from macro 'MPI_MASTER'\n",
      "#define MPI_MASTER(instr) instr\n",
      "                          ^~~~~\n",
      "14 warnings generated.\n",
      "INFO: ===\n",
      "INFO: Placing instr file copy python_tutorial.instr in dataset /Users/madsbertelsen/PaNOSC/McStasScript/github/McStasScript/tutorial/data_folder/union_materials_5\n",
      "\n",
      "    Opening input file '/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//data/Cu.laz' (Table_Read_Offset)\n",
      "Table from file 'Cu.laz' (block 1) is 19 x 18 (x=1:6), constant step. interpolation: linear\n",
      "  '# TITLE *-Cu-[FM3-M] Otte, H.M.[1961];# CELL 3.615050 3.615050 3.615050 90. ...'\n",
      "PowderN: powder: Reading 19 rows from Cu.laz\n",
      "PowderN: powder: Read 19 reflections from file 'Cu.laz'\n",
      "PowderN: powder: Vc=47.24 [Angs] sigma_abs=15.12 [barn] sigma_inc=2.2 [barn] reflections=Cu.laz\n",
      "---------------------------------------------------------------------\n",
      "global_process_list.num_elements: 2\n",
      "name of process [0]: incoherent \n",
      "component index [0]: 1 \n",
      "name of process [1]: powder \n",
      "component index [1]: 4 \n",
      "---------------------------------------------------------------------\n",
      "global_material_list.num_elements: 3\n",
      "name of material    [0]: inc_material \n",
      "component index     [0]: 2 \n",
      "my_absoprtion       [0]: 0.000000 \n",
      "number of processes [0]: 1 \n",
      "name of material    [1]: abs_material \n",
      "component index     [1]: 3 \n",
      "my_absoprtion       [1]: 3.000000 \n",
      "number of processes [1]: 0 \n",
      "name of material    [2]: powder_material \n",
      "component index     [2]: 5 \n",
      "my_absoprtion       [2]: 1.200000 \n",
      "number of processes [2]: 2 \n",
      "---------------------------------------------------------------------\n",
      "global_geometry_list.num_elements: 3\n",
      "\n",
      "name of geometry    [0]: box_inc \n",
      "component index     [0]: 7 \n",
      "Volume.name         [0]: box_inc \n",
      "Volume.p_physics.is_vacuum           [0]: 0 \n",
      "Volume.p_physics.my_absorption       [0]: 0.000000 \n",
      "Volume.p_physics.number of processes [0]: 1 \n",
      "Volume.geometry.shape                [0]: box \n",
      "Volume.geometry.center.x             [0]: 0.040000 \n",
      "Volume.geometry.center.y             [0]: 0.000000 \n",
      "Volume.geometry.center.z             [0]: 1.000000 \n",
      "Volume.geometry.rotation_matrix[0]           [0]: [1.000000 0.000000 0.000000] \n",
      "Volume.geometry.rotation_matrix[1]           [0]: [0.000000 1.000000 0.000000] \n",
      "Volume.geometry.rotation_matrix[2]           [0]: [0.000000 0.000000 1.000000] \n",
      "Volume.geometry.focus_data_array.elements[0].Aim             [0]: [0.000000 0.000000 1.000000] \n",
      "\n",
      "name of geometry    [1]: box_powder \n",
      "component index     [1]: 8 \n",
      "Volume.name         [1]: box_powder \n",
      "Volume.p_physics.is_vacuum           [1]: 0 \n",
      "Volume.p_physics.my_absorption       [1]: 1.200000 \n",
      "Volume.p_physics.number of processes [1]: 2 \n",
      "Volume.geometry.shape                [1]: box \n",
      "Volume.geometry.center.x             [1]: 0.000000 \n",
      "Volume.geometry.center.y             [1]: 0.000000 \n",
      "Volume.geometry.center.z             [1]: 1.000000 \n",
      "Volume.geometry.rotation_matrix[0]           [1]: [1.000000 0.000000 0.000000] \n",
      "Volume.geometry.rotation_matrix[1]           [1]: [0.000000 1.000000 0.000000] \n",
      "Volume.geometry.rotation_matrix[2]           [1]: [0.000000 0.000000 1.000000] \n",
      "Volume.geometry.focus_data_array.elements[0].Aim             [1]: [0.000000 0.000000 1.000000] \n",
      "\n",
      "name of geometry    [2]: box_abs \n",
      "component index     [2]: 9 \n",
      "Volume.name         [2]: box_abs \n",
      "Volume.p_physics.is_vacuum           [2]: 0 \n",
      "Volume.p_physics.my_absorption       [2]: 3.000000 \n",
      "Volume.p_physics.number of processes [2]: 0 \n",
      "Volume.geometry.shape                [2]: box \n",
      "Volume.geometry.center.x             [2]: -0.040000 \n",
      "Volume.geometry.center.y             [2]: 0.000000 \n",
      "Volume.geometry.center.z             [2]: 1.000000 \n",
      "Volume.geometry.rotation_matrix[0]           [2]: [1.000000 0.000000 0.000000] \n",
      "Volume.geometry.rotation_matrix[1]           [2]: [0.000000 1.000000 0.000000] \n",
      "Volume.geometry.rotation_matrix[2]           [2]: [0.000000 0.000000 1.000000] \n",
      "Volume.geometry.focus_data_array.elements[0].Aim             [2]: [0.000000 0.000000 1.000000] \n",
      "---------------------------------------------------------------------\n",
      "number_of_volumes = 4\n",
      "number_of_masks = 0\n",
      "number_of_masked_volumes = 0\n",
      "\n",
      " ---- Overview of the lists generated for each volume ---- \n",
      "List overview for surrounding vacuum\n",
      "LIST: Children for Volume                  0 = [1,2,3]\n",
      "LIST: Direct_children for Volume           0 = [1,2,3]\n",
      "LIST: Intersect_check_list for Volume      0 = [1,2,3]\n",
      "LIST: Mask_intersect_list for Volume       0 = []\n",
      "LIST: Destinations_list for Volume         0 = []\n",
      "LIST: Reduced_destinations_list for Volume 0 = []\n",
      "LIST: Next_volume_list for Volume          0 = [1,2,3]\n",
      "LIST: mask_list for Volume                 0 = []\n",
      "LIST: masked_by_list for Volume            0 = []\n",
      "LIST: masked_by_mask_index_list for Volume 0 = []\n",
      "      mask_mode for Volume                 0 = 0\n",
      "\n",
      "List overview for box_inc with box shape made of inc_material\n",
      "LIST: Children for Volume                  1 = []\n",
      "LIST: Direct_children for Volume           1 = []\n",
      "LIST: Intersect_check_list for Volume      1 = []\n",
      "LIST: Mask_intersect_list for Volume       1 = []\n",
      "LIST: Destinations_list for Volume         1 = [0]\n",
      "LIST: Reduced_destinations_list for Volume 1 = []\n",
      "LIST: Next_volume_list for Volume          1 = [0]\n",
      "      Is_vacuum for Volume                 1 = 0\n",
      "      is_mask_volume for Volume            1 = 0\n",
      "      is_masked_volume for Volume          1 = 0\n",
      "      is_exit_volume for Volume            1 = 0\n",
      "LIST: mask_list for Volume                 1 = []\n",
      "LIST: masked_by_list for Volume            1 = []\n",
      "LIST: masked_by_mask_index_list for Volume 1 = []\n",
      "      mask_mode for Volume                 1 = 0\n",
      "\n",
      "List overview for box_powder with box shape made of powder_material\n",
      "LIST: Children for Volume                  2 = []\n",
      "LIST: Direct_children for Volume           2 = []\n",
      "LIST: Intersect_check_list for Volume      2 = []\n",
      "LIST: Mask_intersect_list for Volume       2 = []\n",
      "LIST: Destinations_list for Volume         2 = [0]\n",
      "LIST: Reduced_destinations_list for Volume 2 = []\n",
      "LIST: Next_volume_list for Volume          2 = [0]\n",
      "      Is_vacuum for Volume                 2 = 0\n",
      "      is_mask_volume for Volume            2 = 0\n",
      "      is_masked_volume for Volume          2 = 0\n",
      "      is_exit_volume for Volume            2 = 0\n",
      "LIST: mask_list for Volume                 2 = []\n",
      "LIST: masked_by_list for Volume            2 = []\n",
      "LIST: masked_by_mask_index_list for Volume 2 = []\n",
      "      mask_mode for Volume                 2 = 0\n",
      "\n",
      "List overview for box_abs with box shape made of abs_material\n",
      "LIST: Children for Volume                  3 = []\n",
      "LIST: Direct_children for Volume           3 = []\n",
      "LIST: Intersect_check_list for Volume      3 = []\n",
      "LIST: Mask_intersect_list for Volume       3 = []\n",
      "LIST: Destinations_list for Volume         3 = [0]\n",
      "LIST: Reduced_destinations_list for Volume 3 = []\n",
      "LIST: Next_volume_list for Volume          3 = [0]\n",
      "      Is_vacuum for Volume                 3 = 0\n",
      "      is_mask_volume for Volume            3 = 0\n",
      "      is_masked_volume for Volume          3 = 0\n",
      "      is_exit_volume for Volume            3 = 0\n",
      "LIST: mask_list for Volume                 3 = []\n",
      "LIST: masked_by_list for Volume            3 = []\n",
      "LIST: masked_by_mask_index_list for Volume 3 = []\n",
      "      mask_mode for Volume                 3 = 0\n",
      "\n",
      "Union_master component master initialized sucessfully\n",
      "Detector: logger_space_I=3.1635e-09 logger_space_ERR=3.59609e-12 logger_space_N=790141 \"logger.dat\"\n",
      "Detector: abs_logger_space_I=1.70717e-09 abs_logger_space_ERR=1.53146e-12 abs_logger_space_N=1.81278e+06 \"abs_logger.dat\"\n",
      "loading system configuration\n",
      "\n"
     ]
    }
   ],
   "source": [
    "instrument.set_parameters(wavelength=8.0)\n",
    "instrument.settings(ncount=3E5, output_path=\"data_folder/union_materials\")\n",
    "instrument.show_settings()\n",
    "\n",
    "instrument.backengine()\n",
    "data = instrument.data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Interpreting the results\n",
    "The first logger shows scattering, and since the top box has incoherent, and the middle both powder and incoherent, we expect those to show up. We can see the beam attenuation, as the beam originates from the left side.\n",
    "\n",
    "The second logger shows absorption, and here the top box is absent as it has no absorption cross section. The bottom box is however visible now, as it has absorption but no scattering. As the absorber is quite strong, we see the attenuation here as well."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Plotting data with name logger_space\n",
      "Plotting data with name abs_logger_space\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x504 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plotter.make_sub_plot(data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Alternative run to show powder properties\n",
    "In order to see the scattering from the powder sample, we restrict the source size to only illuminate the center box with a powder material. A wavelength with powder lines close to 90 deg is selected to ensure the scattering from the center box hits the surrounding boxes.\n",
    "\n",
    "We choose to show the data with logarithmic colorscale using the *name_plot_options* method on functions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "tags": [
     "scroll-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Instrument settings:\n",
      "  ncount:           5.00e+06\n",
      "  output_path:      data_folder/union_materials\n",
      "  run_path:         run_folder\n",
      "  package_path:     /Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1\n",
      "  executable_path:  /Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1/bin/\n",
      "  executable:       mcrun\n",
      "  force_compile:    True\n",
      "INFO: Using directory: \"/Users/madsbertelsen/PaNOSC/McStasScript/github/McStasScript/tutorial/data_folder/union_materials_6\"\n",
      "INFO: Regenerating c-file: python_tutorial.c\n",
      "CFLAGS= -I@MCCODE_LIB@/share/\n",
      "INFO: Recompiling: ./python_tutorial.out\n",
      "mccode-r.c:2837:3: warning: expression result unused [-Wunused-value]\n",
      "  *t0;\n",
      "  ^~~\n",
      "In file included from /Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//contrib/union/Incoherent_process.comp:65:\n",
      "/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//share/Union_functions.c:1604:105: warning: incompatible pointer types passing 'int (const struct saved_history_struct *, const struct saved_history_struct *)' to parameter of type 'int (* _Nonnull)(const void *, const void *)' [-Wincompatible-pointer-types]\n",
      "  qsort(total_history.saved_histories,total_history.used_elements,sizeof (struct saved_history_struct), Sample_compare_history_intensities);\n",
      "                                                                                                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/usr/include/stdlib.h:161:22: note: passing argument to parameter '__compar' here\n",
      "            int (* _Nonnull __compar)(const void *, const void *));\n",
      "                            ^\n",
      "In file included from /Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//contrib/union/Incoherent_process.comp:65:\n",
      "/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//share/Union_functions.c:1613:20: warning: incompatible pointer types passing 'struct saved_history_struct *' to parameter of type 'struct dynamic_history_list *' [-Wincompatible-pointer-types]\n",
      "    printf_history(&total_history.saved_histories[history_iterate]);\n",
      "                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "mccode-r.h:219:27: note: expanded from macro 'MPI_MASTER'\n",
      "#define MPI_MASTER(instr) instr\n",
      "                          ^~~~~\n",
      "/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//share/Union_functions.c:1434:50: note: passing argument to parameter 'history' here\n",
      "void printf_history(struct dynamic_history_list *history) {\n",
      "                                                 ^\n",
      "In file included from /Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//contrib/union/Incoherent_process.comp:65:\n",
      "In file included from /Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//share/Union_functions.c:2030:\n",
      "/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//share/Geometry_functions.c:839:1: warning: non-void function does not return a value in all control paths [-Wreturn-type]\n",
      "};\n",
      "^\n",
      "/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//share/Geometry_functions.c:883:1: warning: non-void function does not return a value [-Wreturn-type]\n",
      "};\n",
      "^\n",
      "/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//share/Geometry_functions.c:3274:42: warning: if statement has empty body [-Wempty-body]\n",
      "    if (dist_to_corner > sphere_2_radius); { sphere_2_radius = dist_to_corner ; }\n",
      "                                         ^\n",
      "/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//share/Geometry_functions.c:3274:42: note: put the semicolon on a separate line to silence this warning\n",
      "/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//share/Geometry_functions.c:3276:42: warning: if statement has empty body [-Wempty-body]\n",
      "    if (dist_to_corner > sphere_2_radius); { sphere_2_radius = dist_to_corner ; }\n",
      "                                         ^\n",
      "/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//share/Geometry_functions.c:3276:42: note: put the semicolon on a separate line to silence this warning\n",
      "/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//share/Geometry_functions.c:3278:42: warning: if statement has empty body [-Wempty-body]\n",
      "    if (dist_to_corner > sphere_2_radius); { sphere_2_radius = dist_to_corner ; }\n",
      "                                         ^\n",
      "/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//share/Geometry_functions.c:3278:42: note: put the semicolon on a separate line to silence this warning\n",
      "/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//share/Geometry_functions.c:3280:42: warning: if statement has empty body [-Wempty-body]\n",
      "    if (dist_to_corner > sphere_2_radius); { sphere_2_radius = dist_to_corner ; }\n",
      "                                         ^\n",
      "/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//share/Geometry_functions.c:3280:42: note: put the semicolon on a separate line to silence this warning\n",
      "/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//contrib/union/Union_logger_2D_space.comp:574:45: warning: format string is not a string literal (potentially insecure) [-Wformat-security]\n",
      "  sprintf(this_storage.Detector_2D.Filename,filename);\n",
      "                                            ^~~~~~~~\n",
      "./python_tutorial.c:17318:18: note: expanded from macro 'filename'\n",
      "#define filename mcclogger_space_filename\n",
      "                 ^~~~~~~~~~~~~~~~~~~~~~~~\n",
      "/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/usr/include/secure/_stdio.h:47:56: note: expanded from macro 'sprintf'\n",
      "  __builtin___sprintf_chk (str, 0, __darwin_obsz(str), __VA_ARGS__)\n",
      "                                                       ^~~~~~~~~~~\n",
      "/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//contrib/union/Union_logger_2D_space.comp:574:45: note: treat the string as an argument to avoid this\n",
      "  sprintf(this_storage.Detector_2D.Filename,filename);\n",
      "                                            ^\n",
      "                                            \"%s\", \n",
      "./python_tutorial.c:17318:18: note: expanded from macro 'filename'\n",
      "#define filename mcclogger_space_filename\n",
      "                 ^\n",
      "/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/usr/include/secure/_stdio.h:47:56: note: expanded from macro 'sprintf'\n",
      "  __builtin___sprintf_chk (str, 0, __darwin_obsz(str), __VA_ARGS__)\n",
      "                                                       ^\n",
      "/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//contrib/union/Union_abs_logger_2D_space.comp:543:49: warning: format string is not a string literal (potentially insecure) [-Wformat-security]\n",
      "  sprintf(this_abs_storage.Detector_2D.Filename,filename);\n",
      "                                                ^~~~~~~~\n",
      "./python_tutorial.c:17560:18: note: expanded from macro 'filename'\n",
      "#define filename mccabs_logger_space_filename\n",
      "                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/usr/include/secure/_stdio.h:47:56: note: expanded from macro 'sprintf'\n",
      "  __builtin___sprintf_chk (str, 0, __darwin_obsz(str), __VA_ARGS__)\n",
      "                                                       ^~~~~~~~~~~\n",
      "/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//contrib/union/Union_abs_logger_2D_space.comp:543:49: note: treat the string as an argument to avoid this\n",
      "  sprintf(this_abs_storage.Detector_2D.Filename,filename);\n",
      "                                                ^\n",
      "                                                \"%s\", \n",
      "./python_tutorial.c:17560:18: note: expanded from macro 'filename'\n",
      "#define filename mccabs_logger_space_filename\n",
      "                 ^\n",
      "/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk/usr/include/secure/_stdio.h:47:56: note: expanded from macro 'sprintf'\n",
      "  __builtin___sprintf_chk (str, 0, __darwin_obsz(str), __VA_ARGS__)\n",
      "                                                       ^\n",
      "/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//contrib/union/Union_master.comp:788:15: warning: expression result unused [-Wunused-value]\n",
      "          if (volume_index_main,Volumes[volume_index_main]->geometry.is_mask_volume == 0 ||\n",
      "              ^~~~~~~~~~~~~~~~~\n",
      "mccode-r.h:219:27: note: expanded from macro 'MPI_MASTER'\n",
      "#define MPI_MASTER(instr) instr\n",
      "                          ^~~~~\n",
      "/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//contrib/union/Union_master.comp:788:90: warning: expression result unused [-Wunused-value]\n",
      "          if (volume_index_main,Volumes[volume_index_main]->geometry.is_mask_volume == 0 ||\n",
      "          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~\n",
      "mccode-r.h:219:27: note: expanded from macro 'MPI_MASTER'\n",
      "#define MPI_MASTER(instr) instr\n",
      "                          ^~~~~\n",
      "/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//contrib/union/Union_master.comp:789:92: warning: expression result unused [-Wunused-value]\n",
      "              volume_index_main,Volumes[volume_index_main]->geometry.is_masked_volume == 0 ||\n",
      "              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~\n",
      "mccode-r.h:219:27: note: expanded from macro 'MPI_MASTER'\n",
      "#define MPI_MASTER(instr) instr\n",
      "                          ^~~~~\n",
      "14 warnings generated.\n",
      "INFO: ===\n",
      "INFO: Placing instr file copy python_tutorial.instr in dataset /Users/madsbertelsen/PaNOSC/McStasScript/github/McStasScript/tutorial/data_folder/union_materials_6\n",
      "\n",
      "    Opening input file '/Applications/McStas-2.7.1.app/Contents/Resources/mcstas/2.7.1//data/Cu.laz' (Table_Read_Offset)\n",
      "Table from file 'Cu.laz' (block 1) is 19 x 18 (x=1:6), constant step. interpolation: linear\n",
      "  '# TITLE *-Cu-[FM3-M] Otte, H.M.[1961];# CELL 3.615050 3.615050 3.615050 90. ...'\n",
      "PowderN: powder: Reading 19 rows from Cu.laz\n",
      "PowderN: powder: Read 19 reflections from file 'Cu.laz'\n",
      "PowderN: powder: Vc=47.24 [Angs] sigma_abs=15.12 [barn] sigma_inc=2.2 [barn] reflections=Cu.laz\n",
      "---------------------------------------------------------------------\n",
      "global_process_list.num_elements: 2\n",
      "name of process [0]: incoherent \n",
      "component index [0]: 1 \n",
      "name of process [1]: powder \n",
      "component index [1]: 4 \n",
      "---------------------------------------------------------------------\n",
      "global_material_list.num_elements: 3\n",
      "name of material    [0]: inc_material \n",
      "component index     [0]: 2 \n",
      "my_absoprtion       [0]: 0.000000 \n",
      "number of processes [0]: 1 \n",
      "name of material    [1]: abs_material \n",
      "component index     [1]: 3 \n",
      "my_absoprtion       [1]: 3.000000 \n",
      "number of processes [1]: 0 \n",
      "name of material    [2]: powder_material \n",
      "component index     [2]: 5 \n",
      "my_absoprtion       [2]: 1.200000 \n",
      "number of processes [2]: 2 \n",
      "---------------------------------------------------------------------\n",
      "global_geometry_list.num_elements: 3\n",
      "\n",
      "name of geometry    [0]: box_inc \n",
      "component index     [0]: 7 \n",
      "Volume.name         [0]: box_inc \n",
      "Volume.p_physics.is_vacuum           [0]: 0 \n",
      "Volume.p_physics.my_absorption       [0]: 0.000000 \n",
      "Volume.p_physics.number of processes [0]: 1 \n",
      "Volume.geometry.shape                [0]: box \n",
      "Volume.geometry.center.x             [0]: 0.040000 \n",
      "Volume.geometry.center.y             [0]: 0.000000 \n",
      "Volume.geometry.center.z             [0]: 1.000000 \n",
      "Volume.geometry.rotation_matrix[0]           [0]: [1.000000 0.000000 0.000000] \n",
      "Volume.geometry.rotation_matrix[1]           [0]: [0.000000 1.000000 0.000000] \n",
      "Volume.geometry.rotation_matrix[2]           [0]: [0.000000 0.000000 1.000000] \n",
      "Volume.geometry.focus_data_array.elements[0].Aim             [0]: [0.000000 0.000000 1.000000] \n",
      "\n",
      "name of geometry    [1]: box_powder \n",
      "component index     [1]: 8 \n",
      "Volume.name         [1]: box_powder \n",
      "Volume.p_physics.is_vacuum           [1]: 0 \n",
      "Volume.p_physics.my_absorption       [1]: 1.200000 \n",
      "Volume.p_physics.number of processes [1]: 2 \n",
      "Volume.geometry.shape                [1]: box \n",
      "Volume.geometry.center.x             [1]: 0.000000 \n",
      "Volume.geometry.center.y             [1]: 0.000000 \n",
      "Volume.geometry.center.z             [1]: 1.000000 \n",
      "Volume.geometry.rotation_matrix[0]           [1]: [1.000000 0.000000 0.000000] \n",
      "Volume.geometry.rotation_matrix[1]           [1]: [0.000000 1.000000 0.000000] \n",
      "Volume.geometry.rotation_matrix[2]           [1]: [0.000000 0.000000 1.000000] \n",
      "Volume.geometry.focus_data_array.elements[0].Aim             [1]: [0.000000 0.000000 1.000000] \n",
      "\n",
      "name of geometry    [2]: box_abs \n",
      "component index     [2]: 9 \n",
      "Volume.name         [2]: box_abs \n",
      "Volume.p_physics.is_vacuum           [2]: 0 \n",
      "Volume.p_physics.my_absorption       [2]: 3.000000 \n",
      "Volume.p_physics.number of processes [2]: 0 \n",
      "Volume.geometry.shape                [2]: box \n",
      "Volume.geometry.center.x             [2]: -0.040000 \n",
      "Volume.geometry.center.y             [2]: 0.000000 \n",
      "Volume.geometry.center.z             [2]: 1.000000 \n",
      "Volume.geometry.rotation_matrix[0]           [2]: [1.000000 0.000000 0.000000] \n",
      "Volume.geometry.rotation_matrix[1]           [2]: [0.000000 1.000000 0.000000] \n",
      "Volume.geometry.rotation_matrix[2]           [2]: [0.000000 0.000000 1.000000] \n",
      "Volume.geometry.focus_data_array.elements[0].Aim             [2]: [0.000000 0.000000 1.000000] \n",
      "---------------------------------------------------------------------\n",
      "number_of_volumes = 4\n",
      "number_of_masks = 0\n",
      "number_of_masked_volumes = 0\n",
      "\n",
      " ---- Overview of the lists generated for each volume ---- \n",
      "List overview for surrounding vacuum\n",
      "LIST: Children for Volume                  0 = [1,2,3]\n",
      "LIST: Direct_children for Volume           0 = [1,2,3]\n",
      "LIST: Intersect_check_list for Volume      0 = [1,2,3]\n",
      "LIST: Mask_intersect_list for Volume       0 = []\n",
      "LIST: Destinations_list for Volume         0 = []\n",
      "LIST: Reduced_destinations_list for Volume 0 = []\n",
      "LIST: Next_volume_list for Volume          0 = [1,2,3]\n",
      "LIST: mask_list for Volume                 0 = []\n",
      "LIST: masked_by_list for Volume            0 = []\n",
      "LIST: masked_by_mask_index_list for Volume 0 = []\n",
      "      mask_mode for Volume                 0 = 0\n",
      "\n",
      "List overview for box_inc with box shape made of inc_material\n",
      "LIST: Children for Volume                  1 = []\n",
      "LIST: Direct_children for Volume           1 = []\n",
      "LIST: Intersect_check_list for Volume      1 = []\n",
      "LIST: Mask_intersect_list for Volume       1 = []\n",
      "LIST: Destinations_list for Volume         1 = [0]\n",
      "LIST: Reduced_destinations_list for Volume 1 = []\n",
      "LIST: Next_volume_list for Volume          1 = [0]\n",
      "      Is_vacuum for Volume                 1 = 0\n",
      "      is_mask_volume for Volume            1 = 0\n",
      "      is_masked_volume for Volume          1 = 0\n",
      "      is_exit_volume for Volume            1 = 0\n",
      "LIST: mask_list for Volume                 1 = []\n",
      "LIST: masked_by_list for Volume            1 = []\n",
      "LIST: masked_by_mask_index_list for Volume 1 = []\n",
      "      mask_mode for Volume                 1 = 0\n",
      "\n",
      "List overview for box_powder with box shape made of powder_material\n",
      "LIST: Children for Volume                  2 = []\n",
      "LIST: Direct_children for Volume           2 = []\n",
      "LIST: Intersect_check_list for Volume      2 = []\n",
      "LIST: Mask_intersect_list for Volume       2 = []\n",
      "LIST: Destinations_list for Volume         2 = [0]\n",
      "LIST: Reduced_destinations_list for Volume 2 = []\n",
      "LIST: Next_volume_list for Volume          2 = [0]\n",
      "      Is_vacuum for Volume                 2 = 0\n",
      "      is_mask_volume for Volume            2 = 0\n",
      "      is_masked_volume for Volume          2 = 0\n",
      "      is_exit_volume for Volume            2 = 0\n",
      "LIST: mask_list for Volume                 2 = []\n",
      "LIST: masked_by_list for Volume            2 = []\n",
      "LIST: masked_by_mask_index_list for Volume 2 = []\n",
      "      mask_mode for Volume                 2 = 0\n",
      "\n",
      "List overview for box_abs with box shape made of abs_material\n",
      "LIST: Children for Volume                  3 = []\n",
      "LIST: Direct_children for Volume           3 = []\n",
      "LIST: Intersect_check_list for Volume      3 = []\n",
      "LIST: Mask_intersect_list for Volume       3 = []\n",
      "LIST: Destinations_list for Volume         3 = [0]\n",
      "LIST: Reduced_destinations_list for Volume 3 = []\n",
      "LIST: Next_volume_list for Volume          3 = [0]\n",
      "      Is_vacuum for Volume                 3 = 0\n",
      "      is_mask_volume for Volume            3 = 0\n",
      "      is_masked_volume for Volume          3 = 0\n",
      "      is_exit_volume for Volume            3 = 0\n",
      "LIST: mask_list for Volume                 3 = []\n",
      "LIST: masked_by_list for Volume            3 = []\n",
      "LIST: masked_by_mask_index_list for Volume 3 = []\n",
      "      mask_mode for Volume                 3 = 0\n",
      "\n",
      "Union_master component master initialized sucessfully\n",
      "Detector: logger_space_I=1.13342e-09 logger_space_ERR=5.90802e-13 logger_space_N=3.86971e+06 \"logger.dat\"\n",
      "Detector: abs_logger_space_I=4.16101e-11 abs_logger_space_ERR=2.36615e-14 abs_logger_space_N=4.12627e+06 \"abs_logger.dat\"\n",
      "loading system configuration\n",
      "\n"
     ]
    }
   ],
   "source": [
    "instrument.set_parameters(wavelength=2.8, source_width=0.03)\n",
    "instrument.settings(ncount=5E6, output_path=\"data_folder/union_materials\")\n",
    "instrument.show_settings()\n",
    "\n",
    "instrument.backengine()\n",
    "data = instrument.data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Plotting data with name logger_space\n",
      "Plotting data with name abs_logger_space\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x504 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "functions.name_plot_options(\"logger_space\", data, log=True)\n",
    "functions.name_plot_options(\"abs_logger_space\", data, log=True)\n",
    "plotter.make_sub_plot(data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Interpretation of the data\n",
    "Now that the direct beam only hits the center box, all rays that enter the surrounding boxes are scattered from that center box. Since the center box contains a powder, the scattered beam is not homogeneous and most of it is in the form of Bragg peaks with certain scattering angles, and we can see two of these intersecting the surrounding geometries."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Troubleshooting\n",
    "In case of issues with the notebooks concerning the Union components or McStasScript it is recommended to:\n",
    "- Update McStasScript with python -m pip install --upgrade mcstasscript\n",
    "- Get newest version of Union components (Both library files and components themselves)\n",
    "\n",
    "Since the Union components need to collaborate, it is important to have the same version of the libraries and components. The newest version of the components can be found here: https://github.com/McStasMcXtrace/McCode/tree/master/mcstas-comps/contrib/union\n",
    "All libraries for McStas are found here: https://github.com/McStasMcXtrace/McCode/tree/master/mcstas-comps/share but only three are needed for the Union components:\n",
    "- Union_initialization.c\n",
    "- Union_functions.c\n",
    "- Geometry_functions.c\n",
    "- Union_last_functions.c (if on McStas 3.X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "celltoolbar": "Tags",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
