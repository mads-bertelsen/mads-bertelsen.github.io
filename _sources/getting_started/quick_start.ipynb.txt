{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "delayed-biodiversity",
   "metadata": {},
   "source": [
    "# Quick start\n",
    "This section is a quick start guide that will show the basic functionality of McStasScript. It assumes the user is already familiar with McStas itself, if this is not the case, it is recommended to start with the tutorial which can serve as an introduction to both McStas and McStasScript.\n",
    "\n",
    "## Importing the package\n",
    "The package includes an interface folder that contains the modules which the  user is meant to use directly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "dense-internet",
   "metadata": {},
   "outputs": [],
   "source": [
    "from mcstasscript.interface import instr, functions, plotter"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "exotic-sandwich",
   "metadata": {},
   "source": [
    "## Creating the first instrument object\n",
    "Now the package can be used. Start with creating a new instrument, just needs a name. For a McXtrace instrument use McXtrace_instr instead."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "disabled-canon",
   "metadata": {},
   "outputs": [],
   "source": [
    "instrument = instr.McStas_instr(\"first_instrument\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "known-depression",
   "metadata": {},
   "source": [
    "### Finding a component\n",
    "The instrument object loads the available McStas components, so it can show these in order to help the user."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "adult-assignment",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Here are the available component categories:\n",
      " contrib\n",
      " misc\n",
      " monitors\n",
      " obsolete\n",
      " optics\n",
      " samples\n",
      " sources\n",
      " union\n",
      "Call show_components(category_name) to display\n"
     ]
    }
   ],
   "source": [
    "instrument.show_components()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fatal-climate",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Here are all components in the sources category.\n",
      " Adapt_check     Moderator           Source_Optimizer   Source_gen\n",
      " ESS_butterfly   Monitor_Optimizer   Source_adapt       Source_simple\n",
      " ESS_moderator   Source_Maxwell_3    Source_div         \n"
     ]
    }
   ],
   "source": [
    "instrument.show_components(\"sources\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "powerful-rover",
   "metadata": {},
   "source": [
    "### Adding the first component\n",
    "McStas components can be added to the instrument, here we add a source and ask for help on the parameters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "instructional-liquid",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " ___ Help Source_simple _____________________________________________________________\n",
      "|\u001b[1moptional parameter\u001b[0m|\u001b[1m\u001b[4mrequired parameter\u001b[0m\u001b[0m|\u001b[1m\u001b[94mdefault value\u001b[0m\u001b[0m|\u001b[1m\u001b[92muser specified value\u001b[0m\u001b[0m|\n",
      "\u001b[1mradius\u001b[0m = \u001b[1m\u001b[94m0.1\u001b[0m\u001b[0m [m] // Radius of circle in (x,y,0) plane where neutrons are \n",
      "                    generated. \n",
      "\u001b[1myheight\u001b[0m = \u001b[1m\u001b[94m0.0\u001b[0m\u001b[0m [m] // Height of rectangle in (x,y,0) plane where neutrons are \n",
      "                     generated. \n",
      "\u001b[1mxwidth\u001b[0m = \u001b[1m\u001b[94m0.0\u001b[0m\u001b[0m [m] // Width of rectangle in (x,y,0) plane where neutrons are \n",
      "                    generated. \n",
      "\u001b[1mdist\u001b[0m = \u001b[1m\u001b[94m0.0\u001b[0m\u001b[0m [m] // Distance to target along z axis.\n",
      "\u001b[1mfocus_xw\u001b[0m = \u001b[1m\u001b[94m0.045\u001b[0m\u001b[0m [m] // Width of target\n",
      "\u001b[1mfocus_yh\u001b[0m = \u001b[1m\u001b[94m0.12\u001b[0m\u001b[0m [m] // Height of target\n",
      "\u001b[1mE0\u001b[0m = \u001b[1m\u001b[94m0.0\u001b[0m\u001b[0m [meV] // Mean energy of neutrons.\n",
      "\u001b[1mdE\u001b[0m = \u001b[1m\u001b[94m0.0\u001b[0m\u001b[0m [meV] // Energy half spread of neutrons (flat or gaussian sigma).\n",
      "\u001b[1mlambda0\u001b[0m = \u001b[1m\u001b[94m0.0\u001b[0m\u001b[0m [AA] // Mean wavelength of neutrons.\n",
      "\u001b[1mdlambda\u001b[0m = \u001b[1m\u001b[94m0.0\u001b[0m\u001b[0m [AA] // Wavelength half spread of neutrons.\n",
      "\u001b[1mflux\u001b[0m = \u001b[1m\u001b[94m1.0\u001b[0m\u001b[0m [1/(s*cm**2*st*energy unit)] // flux per energy unit, Angs or meV if \n",
      "                                           flux=0, the source emits 1 in 4*PI whole \n",
      "                                           space. \n",
      "\u001b[1mgauss\u001b[0m = \u001b[1m\u001b[94m0.0\u001b[0m\u001b[0m [1] // Gaussian (1) or Flat (0) energy/wavelength distribution\n",
      "\u001b[1mtarget_index\u001b[0m = \u001b[1m\u001b[94m1\u001b[0m\u001b[0m [1] // relative index of component to focus at, e.g. next is \n",
      "                        +1 this is used to compute 'dist' automatically. \n",
      "-------------------------------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "source = instrument.add_component(\"source\", \"Source_simple\")\n",
    "source.show_parameters()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "noble-colleague",
   "metadata": {},
   "source": [
    "### Set parameters\n",
    "The parameters of the component object are adjustable directly through the attributes of the object."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "continued-denial",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "COMPONENT source = Source_simple\n",
      "  \u001b[1myheight\u001b[0m = \u001b[1m\u001b[92m0.03\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1mxwidth\u001b[0m = \u001b[1m\u001b[92m0.03\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1mdist\u001b[0m = \u001b[1m\u001b[92m5\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1mfocus_xw\u001b[0m = \u001b[1m\u001b[92m0.01\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1mfocus_yh\u001b[0m = \u001b[1m\u001b[92m0.01\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1mlambda0\u001b[0m = \u001b[1m\u001b[92m3\u001b[0m\u001b[0m [AA]\n",
      "  \u001b[1mdlambda\u001b[0m = \u001b[1m\u001b[92m2.2\u001b[0m\u001b[0m [AA]\n",
      "AT [0, 0, 0] ABSOLUTE\n"
     ]
    }
   ],
   "source": [
    "source.xwidth = 0.03\n",
    "source.yheight = 0.03\n",
    "source.lambda0 = 3\n",
    "source.dlambda = 2.2\n",
    "source.dist = 5\n",
    "source.focus_xw = 0.01\n",
    "source.focus_yh = 0.01\n",
    "print(source)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "interior-better",
   "metadata": {},
   "source": [
    "### Instrument parameters\n",
    "It is possible to add instrument parameters that can be adjusted when running the simulation or adjusted using the widget interface."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "atlantic-capital",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "COMPONENT source = Source_simple\n",
      "  \u001b[1myheight\u001b[0m = \u001b[1m\u001b[92m0.03\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1mxwidth\u001b[0m = \u001b[1m\u001b[92m0.03\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1mdist\u001b[0m = \u001b[1m\u001b[92m5\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1mfocus_xw\u001b[0m = \u001b[1m\u001b[92m0.01\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1mfocus_yh\u001b[0m = \u001b[1m\u001b[92m0.01\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1mlambda0\u001b[0m = \u001b[1m\u001b[92mwavelength\u001b[0m\u001b[0m [AA]\n",
      "  \u001b[1mdlambda\u001b[0m = \u001b[1m\u001b[92m0.1*wavelength\u001b[0m\u001b[0m [AA]\n",
      "AT [0, 0, 0] ABSOLUTE\n"
     ]
    }
   ],
   "source": [
    "wavelength = instrument.add_parameter(\"wavelength\", value=3, comment=\"Wavelength in AA\")\n",
    "source.lambda0 = wavelength\n",
    "source.dlambda = \"0.1*wavelength\"\n",
    "print(source)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "practical-somewhere",
   "metadata": {},
   "source": [
    "### Inserting a sample component\n",
    "A sample component is added as any other component, but here we place it relative to the source. A SANS sample is used, it focuses to a detector (chosen with target_index) with a width of focus_xw and height of focus_yh."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "changing-funds",
   "metadata": {},
   "outputs": [],
   "source": [
    "sample = instrument.add_component(\"sans_sample\", \"Sans_spheres\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "after-reliance",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "COMPONENT sans_sample = Sans_spheres\n",
      "  \u001b[1mR\u001b[0m = \u001b[1m\u001b[92m120\u001b[0m\u001b[0m [AA]\n",
      "  \u001b[1mxwidth\u001b[0m = \u001b[1m\u001b[92m0.01\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1myheight\u001b[0m = \u001b[1m\u001b[92m0.01\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1mzdepth\u001b[0m = \u001b[1m\u001b[92m0.01\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1mtarget_index\u001b[0m = \u001b[1m\u001b[92m1\u001b[0m\u001b[0m [1]\n",
      "  \u001b[1mfocus_xw\u001b[0m = \u001b[1m\u001b[92m0.5\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1mfocus_yh\u001b[0m = \u001b[1m\u001b[92m0.5\u001b[0m\u001b[0m [m]\n",
      "AT [0, 0, 3] RELATIVE source\n"
     ]
    }
   ],
   "source": [
    "sample.set_AT(3, RELATIVE=source)\n",
    "sample.set_parameters(R=120, xwidth=0.01, yheight=0.01, zdepth=0.01,\n",
    "                      target_index=1, focus_xw=0.5, focus_yh=0.5)\n",
    "print(sample)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "million-shoot",
   "metadata": {},
   "source": [
    "### Adding a monitor\n",
    "The monitor can be placed relative to the sample, and even use the attributes from the sample to define its size so that the two always match. When setting a filename, it has to be a string also in the generated code, so use double quotation marks as shown here."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "characteristic-spectacular",
   "metadata": {},
   "outputs": [],
   "source": [
    "PSD = instrument.add_component(\"PSD\", \"PSD_monitor\")\n",
    "PSD.set_AT([0, 0, 5], RELATIVE=sample)\n",
    "PSD.set_parameters(xwidth=sample.focus_xw, yheight=sample.focus_yh, filename='\"PSD.dat\"')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "mechanical-burlington",
   "metadata": {},
   "source": [
    "## Setting up the simulation\n",
    "The instrument now contains a source, a sample and a monitor, this is enough for a simple demonstration."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "wicked-terrorism",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " wavelength  = 3  // Wavelength in AA\n"
     ]
    }
   ],
   "source": [
    "instrument.show_parameters()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "postal-advocate",
   "metadata": {},
   "outputs": [],
   "source": [
    "instrument.set_parameters(wavelength=4)\n",
    "instrument.settings(ncount=2E6)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "requested-translation",
   "metadata": {},
   "source": [
    "### Performing the simulation\n",
    "In order to start the simulation the *backengine* method is called. If the simulation is successful, the data will be placed in the *data* attribute, otherwise this attribute will contain None."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "durable-printer",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO: Using directory: \"/Users/madsbertelsen/PaNOSC/McStasScript/github/McStasScript/docs/source/getting_started/first_instrument_data_4\"\n",
      "INFO: Regenerating c-file: first_instrument.c\n",
      "CFLAGS=\n",
      "INFO: Recompiling: ./first_instrument.out\n",
      "mccode-r.c:2837:3: warning: expression result unused [-Wunused-value]\n",
      "  *t0;\n",
      "  ^~~\n",
      "1 warning generated.\n",
      "INFO: ===\n",
      "INFO: Placing instr file copy first_instrument.instr in dataset /Users/madsbertelsen/PaNOSC/McStasScript/github/McStasScript/docs/source/getting_started/first_instrument_data_4\n",
      "\n",
      "Detector: PSD_I=1.13331e-05 PSD_ERR=1.27748e-08 PSD_N=1.99997e+06 \"PSD.dat\"\n",
      "loading system configuration\n",
      "\n"
     ]
    }
   ],
   "source": [
    "instrument.backengine()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "detailed-ontario",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = instrument.data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "frozen-circle",
   "metadata": {},
   "source": [
    "## Plot the data\n",
    "The data can be plotted with the *make_sub_plot* function from the plotter module."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "christian-detail",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Plotting data with name PSD\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 936x504 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plotter.make_sub_plot(data, log=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "critical-rebound",
   "metadata": {},
   "source": [
    "### Access the data\n",
    "The data is a list of McStasData objects and can be accessed directly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "gothic-water",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[\n",
      "McStasData: PSD type: 2D  I:1.13331e-05 E:1.27748e-08 N:1.99997e+06]\n"
     ]
    }
   ],
   "source": [
    "print(data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "common-overhead",
   "metadata": {},
   "source": [
    "It is possible to search through the data list with the *name_search* function to retrieve the desired data object. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "colonial-thompson",
   "metadata": {},
   "outputs": [],
   "source": [
    "PSD_data = functions.name_search(\"PSD\", data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "american-crash",
   "metadata": {},
   "source": [
    "The intensities can then be accessed directly, along with Error and Ncount. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "exempt-lincoln",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[3.44527442e-29, 2.85790145e-29, 3.31769558e-29, ...,\n",
       "        2.91848858e-29, 3.46035438e-29, 3.18800919e-29],\n",
       "       [2.99309240e-29, 2.71389219e-29, 4.51518249e-29, ...,\n",
       "        3.88940177e-29, 2.79711427e-29, 3.13858152e-29],\n",
       "       [3.09932004e-29, 3.65012990e-29, 4.19605051e-29, ...,\n",
       "        6.17328696e-29, 4.54832798e-29, 2.95402503e-29],\n",
       "       ...,\n",
       "       [2.26834139e-29, 3.81964364e-29, 5.66352294e-29, ...,\n",
       "        6.09311571e-29, 4.78664320e-29, 3.58314124e-29],\n",
       "       [3.37192383e-29, 2.95154846e-29, 3.68253460e-29, ...,\n",
       "        4.11785300e-29, 3.48591918e-29, 2.20162822e-29],\n",
       "       [2.39943987e-29, 2.44856071e-29, 2.61788386e-29, ...,\n",
       "        3.09847097e-29, 2.78252273e-29, 2.38869215e-29]])"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "PSD_data.Intensity"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "unavailable-secretariat",
   "metadata": {},
   "source": [
    "Metadata is also available as a dict."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "mediterranean-guatemala",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Date : Tue Jan 11 12:39:32 2022 (1641901172)\n",
      "type : array_2d(90, 90)\n",
      "Source : first_instrument (first_instrument.instr)\n",
      "component : PSD\n",
      "position : 0 0 8\n",
      "title : PSD monitor\n",
      "Ncount : 2000000\n",
      "filename : PSD.dat\n",
      "statistics : X0=0.000187759; dX=0.61402; Y0=0.00177741; dY=0.612948;\n",
      "signal : Min=2.20163e-29; Max=1.15483e-06; Mean=1.39915e-09;\n",
      "values : 1.13331e-05 1.27748e-08 1.99997e+06\n",
      "xvar : X\n",
      "yvar : Y\n",
      "xlabel : X position [cm]\n",
      "ylabel : Y position [cm]\n",
      "zvar : I\n",
      "zlabel : Signal per bin\n",
      "xylimits : -25 25 -25 25\n",
      "variables : I I_err N\n",
      "Parameters : {'wavelength': 4.0}\n"
     ]
    }
   ],
   "source": [
    "info_dict = PSD_data.metadata.info\n",
    "for field, info in info_dict.items():\n",
    "    print(field, \":\", info)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "coupled-sailing",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
