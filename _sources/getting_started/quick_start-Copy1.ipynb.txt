{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "delayed-biodiversity",
   "metadata": {},
   "source": [
    "# Quick start\n",
    "This section is a quick start guide that will show the basic functionality of McStasScript. It assumes the user is already familiar with McStas itself, if this is not the case, it is recommended to start with the tutorial which can serve as an introduction to both McStas and McStasScript.\n",
    "\n",
    "## Importing the package\n",
    "McStasScript needs to be imported into the users python environment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "dense-internet",
   "metadata": {},
   "outputs": [],
   "source": [
    "import mcstasscript as ms"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "exotic-sandwich",
   "metadata": {},
   "source": [
    "## Creating the first instrument object\n",
    "Now the package can be used. Start with creating a new instrument, just needs a name. For a McXtrace instrument use McXtrace_instr instead."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "disabled-canon",
   "metadata": {},
   "outputs": [],
   "source": [
    "instrument = ms.McStas_instr(\"first_instrument\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "known-depression",
   "metadata": {},
   "source": [
    "### Finding a component\n",
    "The instrument object loads the available McStas components, so it can show these in order to help the user."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "adult-assignment",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Here are the available component categories:\n",
      " contrib\n",
      " misc\n",
      " monitors\n",
      " obsolete\n",
      " optics\n",
      " samples\n",
      " sources\n",
      " union\n",
      "Call show_components(category_name) to display\n"
     ]
    }
   ],
   "source": [
    "instrument.show_components()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fatal-climate",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Here are all components in the sources category.\n",
      " Adapt_check     Moderator           Source_Optimizer   Source_gen\n",
      " ESS_butterfly   Monitor_Optimizer   Source_adapt       Source_simple\n",
      " ESS_moderator   Source_Maxwell_3    Source_div         \n"
     ]
    }
   ],
   "source": [
    "instrument.show_components(\"sources\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "powerful-rover",
   "metadata": {},
   "source": [
    "### Adding the first component\n",
    "McStas components can be added to the instrument, here we add a source and ask for help on the parameters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "instructional-liquid",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " ___ Help Source_simple _____________________________________________________________\n",
      "|\u001b[1moptional parameter\u001b[0m|\u001b[1m\u001b[4mrequired parameter\u001b[0m\u001b[0m|\u001b[1m\u001b[94mdefault value\u001b[0m\u001b[0m|\u001b[1m\u001b[92muser specified value\u001b[0m\u001b[0m|\n",
      "\u001b[1mradius\u001b[0m = \u001b[1m\u001b[94m0.1\u001b[0m\u001b[0m [m] // Radius of circle in (x,y,0) plane where neutrons are \n",
      "                    generated. \n",
      "\u001b[1myheight\u001b[0m = \u001b[1m\u001b[94m0.0\u001b[0m\u001b[0m [m] // Height of rectangle in (x,y,0) plane where neutrons are \n",
      "                     generated. \n",
      "\u001b[1mxwidth\u001b[0m = \u001b[1m\u001b[94m0.0\u001b[0m\u001b[0m [m] // Width of rectangle in (x,y,0) plane where neutrons are \n",
      "                    generated. \n",
      "\u001b[1mdist\u001b[0m = \u001b[1m\u001b[94m0.0\u001b[0m\u001b[0m [m] // Distance to target along z axis.\n",
      "\u001b[1mfocus_xw\u001b[0m = \u001b[1m\u001b[94m0.045\u001b[0m\u001b[0m [m] // Width of target\n",
      "\u001b[1mfocus_yh\u001b[0m = \u001b[1m\u001b[94m0.12\u001b[0m\u001b[0m [m] // Height of target\n",
      "\u001b[1mE0\u001b[0m = \u001b[1m\u001b[94m0.0\u001b[0m\u001b[0m [meV] // Mean energy of neutrons.\n",
      "\u001b[1mdE\u001b[0m = \u001b[1m\u001b[94m0.0\u001b[0m\u001b[0m [meV] // Energy half spread of neutrons (flat or gaussian sigma).\n",
      "\u001b[1mlambda0\u001b[0m = \u001b[1m\u001b[94m0.0\u001b[0m\u001b[0m [AA] // Mean wavelength of neutrons.\n",
      "\u001b[1mdlambda\u001b[0m = \u001b[1m\u001b[94m0.0\u001b[0m\u001b[0m [AA] // Wavelength half spread of neutrons.\n",
      "\u001b[1mflux\u001b[0m = \u001b[1m\u001b[94m1.0\u001b[0m\u001b[0m [1/(s*cm**2*st*energy unit)] // flux per energy unit, Angs or meV if \n",
      "                                           flux=0, the source emits 1 in 4*PI whole \n",
      "                                           space. \n",
      "\u001b[1mgauss\u001b[0m = \u001b[1m\u001b[94m0.0\u001b[0m\u001b[0m [1] // Gaussian (1) or Flat (0) energy/wavelength distribution\n",
      "\u001b[1mtarget_index\u001b[0m = \u001b[1m\u001b[94m1\u001b[0m\u001b[0m [1] // relative index of component to focus at, e.g. next is \n",
      "                        +1 this is used to compute 'dist' automatically. \n",
      "-------------------------------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "source = instrument.add_component(\"source\", \"Source_simple\")\n",
    "source.show_parameters()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "noble-colleague",
   "metadata": {},
   "source": [
    "### Set parameters\n",
    "The parameters of the component object are adjustable directly through the attributes of the object."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "continued-denial",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "COMPONENT source = Source_simple\n",
      "  \u001b[1myheight\u001b[0m = \u001b[1m\u001b[92m0.03\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1mxwidth\u001b[0m = \u001b[1m\u001b[92m0.03\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1mdist\u001b[0m = \u001b[1m\u001b[92m5\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1mfocus_xw\u001b[0m = \u001b[1m\u001b[92m0.01\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1mfocus_yh\u001b[0m = \u001b[1m\u001b[92m0.01\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1mlambda0\u001b[0m = \u001b[1m\u001b[92m3\u001b[0m\u001b[0m [AA]\n",
      "  \u001b[1mdlambda\u001b[0m = \u001b[1m\u001b[92m2.2\u001b[0m\u001b[0m [AA]\n",
      "AT [0, 0, 0] ABSOLUTE\n"
     ]
    }
   ],
   "source": [
    "source.xwidth = 0.03\n",
    "source.yheight = 0.03\n",
    "source.lambda0 = 3\n",
    "source.dlambda = 2.2\n",
    "source.dist = 5\n",
    "source.focus_xw = 0.01\n",
    "source.focus_yh = 0.01\n",
    "print(source)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "interior-better",
   "metadata": {},
   "source": [
    "### Instrument parameters\n",
    "It is possible to add instrument parameters that can be adjusted when running the simulation or adjusted using the widget interface."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "atlantic-capital",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "COMPONENT source = Source_simple\n",
      "  \u001b[1myheight\u001b[0m = \u001b[1m\u001b[92m0.03\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1mxwidth\u001b[0m = \u001b[1m\u001b[92m0.03\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1mdist\u001b[0m = \u001b[1m\u001b[92m5\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1mfocus_xw\u001b[0m = \u001b[1m\u001b[92m0.01\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1mfocus_yh\u001b[0m = \u001b[1m\u001b[92m0.01\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1mlambda0\u001b[0m = \u001b[1m\u001b[92mwavelength\u001b[0m\u001b[0m [AA]\n",
      "  \u001b[1mdlambda\u001b[0m = \u001b[1m\u001b[92m0.1*wavelength\u001b[0m\u001b[0m [AA]\n",
      "AT [0, 0, 0] ABSOLUTE\n"
     ]
    }
   ],
   "source": [
    "wavelength = instrument.add_parameter(\"wavelength\", value=3, comment=\"Wavelength in AA\")\n",
    "source.lambda0 = wavelength\n",
    "source.dlambda = \"0.1*wavelength\"\n",
    "print(source)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "selective-recovery",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " ___ Help Source_simple _____________________________________________________________\n",
      "|\u001b[1moptional parameter\u001b[0m|\u001b[1m\u001b[4mrequired parameter\u001b[0m\u001b[0m|\u001b[1m\u001b[94mdefault value\u001b[0m\u001b[0m|\u001b[1m\u001b[92muser specified value\u001b[0m\u001b[0m|\n",
      "\u001b[1mradius\u001b[0m = \u001b[1m\u001b[94m0.1\u001b[0m\u001b[0m [m] // Radius of circle in (x,y,0) plane where neutrons are \n",
      "                    generated. \n",
      "\u001b[1myheight\u001b[0m = \u001b[1m\u001b[92m0.03\u001b[0m\u001b[0m [m] // Height of rectangle in (x,y,0) plane where neutrons are \n",
      "                      generated. \n",
      "\u001b[1mxwidth\u001b[0m = \u001b[1m\u001b[92m0.03\u001b[0m\u001b[0m [m] // Width of rectangle in (x,y,0) plane where neutrons are \n",
      "                     generated. \n",
      "\u001b[1mdist\u001b[0m = \u001b[1m\u001b[92m5\u001b[0m\u001b[0m [m] // Distance to target along z axis.\n",
      "\u001b[1mfocus_xw\u001b[0m = \u001b[1m\u001b[92m0.01\u001b[0m\u001b[0m [m] // Width of target\n",
      "\u001b[1mfocus_yh\u001b[0m = \u001b[1m\u001b[92m0.01\u001b[0m\u001b[0m [m] // Height of target\n",
      "\u001b[1mE0\u001b[0m = \u001b[1m\u001b[94m0.0\u001b[0m\u001b[0m [meV] // Mean energy of neutrons.\n",
      "\u001b[1mdE\u001b[0m = \u001b[1m\u001b[94m0.0\u001b[0m\u001b[0m [meV] // Energy half spread of neutrons (flat or gaussian sigma).\n",
      "\u001b[1mlambda0\u001b[0m = \u001b[1m\u001b[92mwavelength\u001b[0m\u001b[0m [AA] // Mean wavelength of neutrons.\n",
      "\u001b[1mdlambda\u001b[0m = \u001b[1m\u001b[92m0.1*wavelength\u001b[0m\u001b[0m [AA] // Wavelength half spread of neutrons.\n",
      "\u001b[1mflux\u001b[0m = \u001b[1m\u001b[94m1.0\u001b[0m\u001b[0m [1/(s*cm**2*st*energy unit)] // flux per energy unit, Angs or meV if \n",
      "                                           flux=0, the source emits 1 in 4*PI whole \n",
      "                                           space. \n",
      "\u001b[1mgauss\u001b[0m = \u001b[1m\u001b[94m0.0\u001b[0m\u001b[0m [1] // Gaussian (1) or Flat (0) energy/wavelength distribution\n",
      "\u001b[1mtarget_index\u001b[0m = \u001b[1m\u001b[94m1\u001b[0m\u001b[0m [1] // relative index of component to focus at, e.g. next is \n",
      "                        +1 this is used to compute 'dist' automatically. \n",
      "-------------------------------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "source.show_parameters()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "practical-somewhere",
   "metadata": {},
   "source": [
    "### Inserting a sample component\n",
    "A sample component is added as any other component, but here we place it relative to the source. A SANS sample is used, it focuses to a detector (chosen with target_index) with a width of focus_xw and height of focus_yh."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "changing-funds",
   "metadata": {},
   "outputs": [],
   "source": [
    "sample = instrument.add_component(\"sans_sample\", \"Sans_spheres\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "after-reliance",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "COMPONENT sans_sample = Sans_spheres\n",
      "  \u001b[1mR\u001b[0m = \u001b[1m\u001b[92m120\u001b[0m\u001b[0m [AA]\n",
      "  \u001b[1mxwidth\u001b[0m = \u001b[1m\u001b[92m0.01\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1myheight\u001b[0m = \u001b[1m\u001b[92m0.01\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1mzdepth\u001b[0m = \u001b[1m\u001b[92m0.01\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1mtarget_index\u001b[0m = \u001b[1m\u001b[92m1\u001b[0m\u001b[0m [1]\n",
      "  \u001b[1mfocus_xw\u001b[0m = \u001b[1m\u001b[92m0.5\u001b[0m\u001b[0m [m]\n",
      "  \u001b[1mfocus_yh\u001b[0m = \u001b[1m\u001b[92m0.5\u001b[0m\u001b[0m [m]\n",
      "AT [0, 0, 5] RELATIVE source\n"
     ]
    }
   ],
   "source": [
    "sample.set_AT(source.dist, RELATIVE=source)\n",
    "sample.set_parameters(R=120, xwidth=0.01, yheight=0.01, zdepth=0.01,\n",
    "                      target_index=1, focus_xw=0.5, focus_yh=0.5)\n",
    "print(sample)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "million-shoot",
   "metadata": {},
   "source": [
    "### Adding a monitor\n",
    "The monitor can be placed relative to the sample, and even use the attributes from the sample to define its size so that the two always match. When setting a filename, it has to be a string also in the generated code, so use double quotation marks as shown here."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "characteristic-spectacular",
   "metadata": {},
   "outputs": [],
   "source": [
    "PSD = instrument.add_component(\"PSD\", \"PSD_monitor\")\n",
    "PSD.set_AT([0, 0, 5], RELATIVE=sample)\n",
    "PSD.set_parameters(xwidth=sample.focus_xw, yheight=sample.focus_yh, filename='\"PSD.dat\"')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "mechanical-burlington",
   "metadata": {},
   "source": [
    "## Setting up the simulation\n",
    "The instrument now contains a source, a sample and a monitor, this is enough for a simple demonstration."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "wicked-terrorism",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " wavelength  = 3  // Wavelength in AA\n"
     ]
    }
   ],
   "source": [
    "instrument.show_parameters()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "postal-advocate",
   "metadata": {},
   "outputs": [],
   "source": [
    "instrument.set_parameters(wavelength=4)\n",
    "instrument.settings(ncount=2E6)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "requested-translation",
   "metadata": {},
   "source": [
    "### Performing the simulation\n",
    "In order to start the simulation the *backengine* method is called. If the simulation is successful, the data will be placed in the *data* attribute, otherwise this attribute will contain None."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "durable-printer",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO: Using directory: \"/Users/madsbertelsen/PaNOSC/McStasScript/github/McStasScript/docs/source/getting_started/first_instrument_data_14\"\n",
      "INFO: Regenerating c-file: first_instrument.c\n",
      "CFLAGS=\n",
      "INFO: Recompiling: ./first_instrument.out\n",
      "mccode-r.c:2837:3: warning: expression result unused [-Wunused-value]\n",
      "  *t0;\n",
      "  ^~~\n",
      "1 warning generated.\n",
      "INFO: ===\n",
      "INFO: Placing instr file copy first_instrument.instr in dataset /Users/madsbertelsen/PaNOSC/McStasScript/github/McStasScript/docs/source/getting_started/first_instrument_data_14\n",
      "\n",
      "Detector: PSD_I=2.94743e-31 PSD_ERR=1.93544e-33 PSD_N=1.99994e+06 \"PSD.dat\"\n",
      "loading system configuration\n",
      "\n"
     ]
    }
   ],
   "source": [
    "instrument.backengine()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "detailed-ontario",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = instrument.data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "frozen-circle",
   "metadata": {},
   "source": [
    "## Plot the data\n",
    "The data can be plotted with the *make_sub_plot* function from the plotter module."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "christian-detail",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Plotting data with name PSD\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x504 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ms.make_sub_plot(data, log=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "critical-rebound",
   "metadata": {},
   "source": [
    "### Access the data\n",
    "The data is a list of McStasData objects and can be accessed directly."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "gothic-water",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[\n",
      "McStasData: PSD type: 2D  I:2.94743e-31 E:1.93544e-33 N:1.99994e+06]\n"
     ]
    }
   ],
   "source": [
    "print(data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "common-overhead",
   "metadata": {},
   "source": [
    "It is possible to search through the data list with the *name_search* function to retrieve the desired data object. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "colonial-thompson",
   "metadata": {},
   "outputs": [],
   "source": [
    "PSD_data = ms.name_search(\"PSD\", data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "american-crash",
   "metadata": {},
   "source": [
    "The intensities can then be accessed directly, along with Error and Ncount. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "exempt-lincoln",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[6.84187331e-38, 3.77889856e-38, 7.34935822e-38, ...,\n",
       "        4.65629342e-38, 5.90193146e-38, 7.43527115e-38],\n",
       "       [5.64741051e-38, 5.40917050e-38, 8.68218230e-38, ...,\n",
       "        3.81841050e-38, 5.19564738e-38, 5.38229632e-38],\n",
       "       [5.06316113e-38, 6.67163143e-38, 7.45413771e-38, ...,\n",
       "        8.19936762e-38, 5.54221727e-38, 6.40231477e-38],\n",
       "       ...,\n",
       "       [6.43932205e-38, 5.51357962e-38, 1.10983333e-37, ...,\n",
       "        6.26414806e-38, 5.36001549e-38, 5.49572229e-38],\n",
       "       [4.77256509e-38, 4.98853552e-38, 6.64620658e-38, ...,\n",
       "        5.32052456e-38, 4.94468346e-38, 6.08952141e-38],\n",
       "       [4.99933422e-38, 4.97922491e-38, 4.95131505e-38, ...,\n",
       "        6.75855017e-38, 3.73104315e-38, 4.43581308e-38]])"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "PSD_data.Intensity"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "unavailable-secretariat",
   "metadata": {},
   "source": [
    "Metadata is also available as a dict."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "mediterranean-guatemala",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Date : Fri Jan 21 16:21:44 2022 (1642778504)\n",
      "type : array_2d(90, 90)\n",
      "Source : first_instrument (first_instrument.instr)\n",
      "component : PSD\n",
      "position : 0 0 10\n",
      "title : PSD monitor\n",
      "Ncount : 2000000\n",
      "filename : PSD.dat\n",
      "statistics : X0=0.0210688; dX=4.16439; Y0=0.0150399; dY=4.158;\n",
      "signal : Min=3.73104e-38; Max=1.30317e-33; Mean=3.6388e-35;\n",
      "values : 2.94743e-31 1.93544e-33 1.99994e+06\n",
      "xvar : X\n",
      "yvar : Y\n",
      "xlabel : X position [cm]\n",
      "ylabel : Y position [cm]\n",
      "zvar : I\n",
      "zlabel : Signal per bin\n",
      "xylimits : -25 25 -25 25\n",
      "variables : I I_err N\n",
      "Parameters : {'wavelength': 4.0}\n"
     ]
    }
   ],
   "source": [
    "info_dict = PSD_data.metadata.info\n",
    "for field, info in info_dict.items():\n",
    "    print(field, \":\", info)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "coupled-sailing",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "broken-toronto",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "loading system configuration\n",
      "\n",
      "INFO: Using directory: \"first_instrument_mcdisplay_8\"\n",
      "INFO: Regenerating c-file: first_instrument.c\n",
      "CFLAGS=\n",
      "INFO: Recompiling: ./first_instrument.out\n",
      "mccode-r.c:2837:3: warning: expression result unused [-Wunused-value]\n",
      "*t0;\n",
      "^~~\n",
      "1 warning generated.\n",
      "INFO: ===\n",
      "instrument definition parsed\n",
      "reading particle data...\n",
      "\n",
      "Component                         source AT (0,0,0)    0 m from origin\n",
      "Component                    sans_sample AT (0,0,5)    5 m from origin\n",
      "Component                            PSD AT (0,0,10)    10 m from origin\n",
      "Detector: PSD_I=3.09348e-31 PSD_ERR=1.31679e-31 PSD_N=300 \"PSD.dat\"\n",
      "loading system configuration\n",
      "\n",
      "starting particle parsing\n",
      "ended particle parsing\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <iframe\n",
       "            width=\"800\"\n",
       "            height=\"548\"\n",
       "            src=\"./first_instrument_mcdisplay_8/index.html\"\n",
       "            frameborder=\"0\"\n",
       "            allowfullscreen\n",
       "        ></iframe>\n",
       "        "
      ],
      "text/plain": [
       "<IPython.lib.display.IFrame at 0x7feb9080bd30>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "instrument.show_instrument(width=800, height=548)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "optional-ensemble",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<!DOCTYPE html>\n",
       "<html>\n",
       "<head>\n",
       "\t<meta charset=utf-8>\n",
       "\t<style>\n",
       "\t\tbody { margin: 0; }\n",
       "\t\tcanvas { width: 100%; height: 100% }\n",
       "\t</style>\n",
       "</head>\n",
       "<body>\n",
       "\t<script src=\"three.min.js\"></script>\n",
       "\t<script src=\"dat.gui.min.js\"></script>\n",
       "\t<script src=\"OrbitControls.js\"></script>\n",
       "\t<script src=\"Lut.js\"></script>\n",
       "\t<script src=\"jquery.min.js\"></script>\n",
       "\t<script src=\"_mcdisplay.js\"></script>\n",
       "\t<script src=\"_instr.js\"></script>\n",
       "\t<script src=\"_particles.js\"></script>\n",
       "\n",
       "\t<script>\n",
       "        var campos_x = -26.3, campos_y = 26.3, campos_z = 26.3;\n",
       "        var box_x1 = 0, box_x2 = 3, box_y1 = -0.3, box_y2 = 0.3, box_z1 = 49, box_z2 = 53;\n",
       "        var invert_canvas = false;\n",
       "        campos_x = -3.75, campos_y = 4.0, campos_z = 4.0; // line written by SimpleWriter\n",
       "        box_x1 = -0.25, box_x2 = 0.25, box_y1 = -0.25, box_y2 = 0.25, box_z1 = 0.0, box_z2 = 8.0; // line written by SimpleWriter\n",
       "false\n",
       "        var box_lst = [box_x1, box_x2, box_y1, box_y2, box_z1, box_z2];\n",
       "        var controller = new Controller(campos_x, campos_y, campos_z, box_lst, invert_canvas);\n",
       "        var viewmodel = controller.viewmodel;\n",
       "\n",
       "\t\t// UI event handlers interacting only(!!) with the viewmodel.\n",
       "\t\t// TODO: implement callbacks\n",
       "\t\tvar handlePlayPause = function()\n",
       "\t\t{\n",
       "\t\t\tif (viewmodel.playBack == PlayBack.RUN)\n",
       "\t\t\t{\n",
       "\t\t\t\tviewmodel.setPlayBack(PlayBack.PAUSE);\n",
       "\t\t\t}\n",
       "\t\t\telse\n",
       "\t\t\t{\n",
       "\t\t\t\tviewmodel.setPlayBack(PlayBack.RUN);\n",
       "\t\t\t}\n",
       "\t\t}\n",
       "\t\tvar handleNext = function()\n",
       "\t\t{\n",
       "\t\t\tviewmodel.setPlayBack(PlayBack.PAUSE);\n",
       "\t\t\tviewmodel.setRayIdx(viewmodel.getRayIdx() + 1);\n",
       "\t\t}\n",
       "\t\tvar handlePrev = function()\n",
       "\t\t{\n",
       "\t\t\tviewmodel.setPlayBack(PlayBack.PAUSE);\n",
       "\t\t\tviewmodel.setRayIdx(viewmodel.getRayIdx() - 1);\n",
       "\t\t}\n",
       "\t\tvar handleKeepChanged = function(checked)\n",
       "\t\t{\n",
       "\t\t\tif (checked)\n",
       "\t\t\t{\n",
       "\t\t\t\tviewmodel.setDisplayMode(DisplayMode.KEEP);\n",
       "\t\t\t}\n",
       "\t\t\telse\n",
       "\t\t\t{\n",
       "\t\t\t\tviewmodel.setDisplayMode(DisplayMode.SINGLE);\n",
       "\t\t\t}\n",
       "\t\t}\n",
       "\t\tvar handleShowBBChanged = function(checked)\n",
       "\t\t{\n",
       "\t\t\tconsole.log(\"bounding box: \" + checked);\n",
       "\t\t\tviewmodel.setShowBoundingBox(checked);\n",
       "\t\t}\n",
       "\t\tvar handleShowScatterCubesChanged = function(checked)\n",
       "\t\t{\n",
       "\t\t\tconsole.log(\"scatter cubes: \" + checked);\n",
       "\t\t\tviewmodel.setShowScatterCubes(checked);\n",
       "\t\t}\n",
       "\t\tvar handleViewTop = function()\n",
       "\t\t{\n",
       "\t\t\tcontroller.setViewTop();\n",
       "\t\t}\n",
       "\t\tvar handleViewSide = function()\n",
       "\t\t{\n",
       "\t\t\tcontroller.setViewSide();\n",
       "\t\t}\n",
       "\t\tvar handleViewHome = function()\n",
       "\t\t{\n",
       "\t\t\tcontroller.setViewHome();\n",
       "\t\t}\n",
       "\t</script>\n",
       "\n",
       "\t<div id=\"gui\" style=\"width: auto; background-color: black;\">\n",
       "\t\t<label id=\"lblInstrInfo\" style=\"color: white;\">(instr)</label>\n",
       "\t</div>\n",
       "\t<div id=\"gui\" style=\"width: auto; background-color: black;\">\n",
       "\t\t<button id=\"btnPrev\", onclick=\"handlePrev();\" style=\"width: 90px;\">Previous</button>\n",
       "\t\t<button id=\"btnPlayPause\", onclick=\"handlePlayPause();\" style=\"width: 90px;\">Play/Pause</button>\n",
       "\t\t<button id=\"btnNext\", onclick=\"handleNext();\" style=\"width: 90px;\">Next</button>\n",
       "\t\t<label id=\"lblRayIdxText\" style=\"color: white;\">Ray index</label>\n",
       "\t\t<label id=\"lblRayIdx\" style=\"color: white; background-color: black; width: 27px; text-align: right; display: inline-block;\">(idx)</label>\n",
       "\t\t<label id=\"lblMaxRayIdx\" style=\"color: white; background-color: black; display: inline-block;\">(max_idx)</label>\n",
       "\t\t<label id=\"lblKeep\" style=\"color: white; background-color: black; display: inline-block; text-align:right; width: 140px;\">\n",
       "\t\t\tKeep rays<input id=\"cbxKeep\" type=\"checkbox\">\n",
       "\t\t</label>\n",
       "\t\t<label id=\"lblScatterCubes\" style=\"color: white; background-color: black; display: inline-block; text-align:right; width: 140px;\">\n",
       "\t\t\tScatter Markers<input id=\"cbxScattCub\" type=\"checkbox\">\n",
       "\t\t</label>\n",
       "\t\t<label id=\"lblView\" style=\"color: white; background-color: black; display: inline-block; text-align:right; width: 120px;\">Reset view:</label>\n",
       "\t\t<button id=\"btnHome\", onclick=\"handleViewHome();\" style=\"width: 60px;\">Home</button>\n",
       "\t\t<button id=\"btnSide\", onclick=\"handleViewSide();\" style=\"width: 60px;\">Side</button>\n",
       "\t\t<button id=\"btnTop\", onclick=\"handleViewTop();\" style=\"width: 60px;\">Top</button>\n",
       "\t\t<label id=\"lblView\" style=\"color: white; background-color: black; display: inline-block; text-align:right; width: 120px;\">Show BB</label>\n",
       "\t\t<input id=\"cbxBoundingbox\" type=\"checkbox\">\n",
       "\t</div>\n",
       "\t<div id=\"3dcanvas\"></div>\n",
       "\n",
       "\t<script>\n",
       "\t\t// gui synchronization class\n",
       "\t\t//\n",
       "\t\tvar UpdateGui = function()\n",
       "\t\t{\n",
       "\t\t\tthis.vm_version = -1;\n",
       "\t\t\tthis.viewmodel = viewmodel;\n",
       "\t\t}\n",
       "\t\tUpdateGui.prototype.update = function()\n",
       "\t\t{\n",
       "\t\t\t// return if viewmodel is constant\n",
       "\t\t\tif (this.vm_version == this.viewmodel.getUpdateVersion()) { return; }\n",
       "\n",
       "\t\t\tthis.vm_version = this.viewmodel.getUpdateVersion();\n",
       "\n",
       "\t\t\t// update playback mode\n",
       "\t\t\tvar pb = this.viewmodel.getPlayBack();\n",
       "\t\t\tif (pb == PlayBack.RUN)\n",
       "\t\t\t{\n",
       "\t\t\t\tbtn = document.getElementById(\"btnPlayPause\");\n",
       "\t\t\t\tbtn.innerHTML = \"Pause\";\n",
       "\t\t\t}\n",
       "\t\t\tif (pb == PlayBack.PAUSE)\n",
       "\t\t\t{\n",
       "\t\t\t\tbtn = document.getElementById(\"btnPlayPause\");\n",
       "\t\t\t\tbtn.innerHTML = \"Play\";\n",
       "\t\t\t}\n",
       "\t\t\t// update ray index\n",
       "\t\t\tlbl = document.getElementById(\"lblRayIdx\");\n",
       "\t\t\tlbl.innerHTML = this.viewmodel.getRayIdx();\n",
       "\n",
       "\t\t\t// update keep ckeckbox\n",
       "\t\t\tcbxKeep = document.getElementById(\"cbxKeep\");\n",
       "\t\t\tvar dm = this.viewmodel.getDisplayMode();\n",
       "\t\t\tif (dm == DisplayMode.SINGLE)\n",
       "\t\t\t{\n",
       "\t\t\t\tcbxKeep.checked = false;\n",
       "\t\t\t}\n",
       "\t\t\telse\n",
       "\t\t\t{\n",
       "\t\t\t\tcbxKeep.checked = true;\n",
       "\t\t\t}\n",
       "\n",
       "\t\t\t// update show/hide scatter cubes\n",
       "\t\t\tcbxScattCub = document.getElementById(\"cbxScattCub\");\n",
       "\t\t\tcbxScattCub.checked = this.viewmodel.getShowScatterCubes();\n",
       "\n",
       "\t\t\t// update bounding box checkbox\n",
       "\t\t\tcbxBoundingbox = document.getElementById(\"cbxBoundingbox\");\n",
       "\t\t\tcbxBoundingbox.checked = this.viewmodel.getShowBoundingBox();\n",
       "\t\t}\n",
       "\t\tvar upd = new UpdateGui();\n",
       "\n",
       "\t\t// set up static ui\n",
       "\t\tlblInstrInfo = document.getElementById(\"lblInstrInfo\");\n",
       "\t\tlblInstrInfo.innerHTML = MCDATA_instrdata[\"cmd\"];\n",
       "\t\tlblMaxRayIdx = document.getElementById(\"lblMaxRayIdx\");\n",
       "\t\tlblMaxRayIdx.innerHTML = '/ ' + (MCDATA_particledata[\"numrays\"] - 1);\n",
       "\n",
       "\t\t// set keep checkbox event handler\n",
       "\t\tcbxKeep = document.getElementById(\"cbxKeep\");\n",
       "\t\tcbxKeep.addEventListener(\"change\", function () { handleKeepChanged(cbxKeep.checked) });\n",
       "\n",
       "\t\t// set show bounding box event handler\n",
       "\t\tcbxBoundingbox = document.getElementById(\"cbxBoundingbox\");\n",
       "\t\tcbxBoundingbox.addEventListener(\"change\", function () { handleShowBBChanged(cbxBoundingbox.checked) });\n",
       "\n",
       "\t\t// set show bounding box event handler\n",
       "\t\tcbxScattCub = document.getElementById(\"cbxScattCub\");\n",
       "\t\tcbxScattCub.addEventListener(\"change\", function () { handleShowScatterCubesChanged(cbxScattCub.checked) });\n",
       "\n",
       "\t\t// call the mcdisplay app!\n",
       "\t\tcontroller.setUpdateGuiFunc(upd.update);\n",
       "\t\tcontroller.run();\n",
       "    </script>\n",
       "</body>\n",
       "</html>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from IPython.display import HTML\n",
    "\n",
    "HTML(filename=\"first_instrument_20220121_144434/index.html\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "every-potato",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<!DOCTYPE html>\n",
       "<html>\n",
       "<head>\n",
       "\t<meta charset=utf-8>\n",
       "\t<style>\n",
       "\t\tbody { margin: 0; }\n",
       "\t\tcanvas { width: 100%; height: 100% }\n",
       "\t</style>\n",
       "</head>\n",
       "<body>\n",
       "\t<script src=\"three.min.js\"></script>\n",
       "\t<script src=\"dat.gui.min.js\"></script>\n",
       "\t<script src=\"OrbitControls.js\"></script>\n",
       "\t<script src=\"Lut.js\"></script>\n",
       "\t<script src=\"jquery.min.js\"></script>\n",
       "\t<script src=\"_mcdisplay.js\"></script>\n",
       "\t<script src=\"_instr.js\"></script>\n",
       "\t<script src=\"_particles.js\"></script>\n",
       "\n",
       "\t<script>\n",
       "        var campos_x = -26.3, campos_y = 26.3, campos_z = 26.3;\n",
       "        var box_x1 = 0, box_x2 = 3, box_y1 = -0.3, box_y2 = 0.3, box_z1 = 49, box_z2 = 53;\n",
       "        var invert_canvas = false;\n",
       "        campos_x = -3.75, campos_y = 4.0, campos_z = 4.0; // line written by SimpleWriter\n",
       "        box_x1 = -0.25, box_x2 = 0.25, box_y1 = -0.25, box_y2 = 0.25, box_z1 = 0.0, box_z2 = 8.0; // line written by SimpleWriter\n",
       "false\n",
       "        var box_lst = [box_x1, box_x2, box_y1, box_y2, box_z1, box_z2];\n",
       "        var controller = new Controller(campos_x, campos_y, campos_z, box_lst, invert_canvas);\n",
       "        var viewmodel = controller.viewmodel;\n",
       "\n",
       "\t\t// UI event handlers interacting only(!!) with the viewmodel.\n",
       "\t\t// TODO: implement callbacks\n",
       "\t\tvar handlePlayPause = function()\n",
       "\t\t{\n",
       "\t\t\tif (viewmodel.playBack == PlayBack.RUN)\n",
       "\t\t\t{\n",
       "\t\t\t\tviewmodel.setPlayBack(PlayBack.PAUSE);\n",
       "\t\t\t}\n",
       "\t\t\telse\n",
       "\t\t\t{\n",
       "\t\t\t\tviewmodel.setPlayBack(PlayBack.RUN);\n",
       "\t\t\t}\n",
       "\t\t}\n",
       "\t\tvar handleNext = function()\n",
       "\t\t{\n",
       "\t\t\tviewmodel.setPlayBack(PlayBack.PAUSE);\n",
       "\t\t\tviewmodel.setRayIdx(viewmodel.getRayIdx() + 1);\n",
       "\t\t}\n",
       "\t\tvar handlePrev = function()\n",
       "\t\t{\n",
       "\t\t\tviewmodel.setPlayBack(PlayBack.PAUSE);\n",
       "\t\t\tviewmodel.setRayIdx(viewmodel.getRayIdx() - 1);\n",
       "\t\t}\n",
       "\t\tvar handleKeepChanged = function(checked)\n",
       "\t\t{\n",
       "\t\t\tif (checked)\n",
       "\t\t\t{\n",
       "\t\t\t\tviewmodel.setDisplayMode(DisplayMode.KEEP);\n",
       "\t\t\t}\n",
       "\t\t\telse\n",
       "\t\t\t{\n",
       "\t\t\t\tviewmodel.setDisplayMode(DisplayMode.SINGLE);\n",
       "\t\t\t}\n",
       "\t\t}\n",
       "\t\tvar handleShowBBChanged = function(checked)\n",
       "\t\t{\n",
       "\t\t\tconsole.log(\"bounding box: \" + checked);\n",
       "\t\t\tviewmodel.setShowBoundingBox(checked);\n",
       "\t\t}\n",
       "\t\tvar handleShowScatterCubesChanged = function(checked)\n",
       "\t\t{\n",
       "\t\t\tconsole.log(\"scatter cubes: \" + checked);\n",
       "\t\t\tviewmodel.setShowScatterCubes(checked);\n",
       "\t\t}\n",
       "\t\tvar handleViewTop = function()\n",
       "\t\t{\n",
       "\t\t\tcontroller.setViewTop();\n",
       "\t\t}\n",
       "\t\tvar handleViewSide = function()\n",
       "\t\t{\n",
       "\t\t\tcontroller.setViewSide();\n",
       "\t\t}\n",
       "\t\tvar handleViewHome = function()\n",
       "\t\t{\n",
       "\t\t\tcontroller.setViewHome();\n",
       "\t\t}\n",
       "\t</script>\n",
       "\n",
       "\t<div id=\"gui\" style=\"width: auto; background-color: black;\">\n",
       "\t\t<label id=\"lblInstrInfo\" style=\"color: white;\">(instr)</label>\n",
       "\t</div>\n",
       "\t<div id=\"gui\" style=\"width: auto; background-color: black;\">\n",
       "\t\t<button id=\"btnPrev\", onclick=\"handlePrev();\" style=\"width: 90px;\">Previous</button>\n",
       "\t\t<button id=\"btnPlayPause\", onclick=\"handlePlayPause();\" style=\"width: 90px;\">Play/Pause</button>\n",
       "\t\t<button id=\"btnNext\", onclick=\"handleNext();\" style=\"width: 90px;\">Next</button>\n",
       "\t\t<label id=\"lblRayIdxText\" style=\"color: white;\">Ray index</label>\n",
       "\t\t<label id=\"lblRayIdx\" style=\"color: white; background-color: black; width: 27px; text-align: right; display: inline-block;\">(idx)</label>\n",
       "\t\t<label id=\"lblMaxRayIdx\" style=\"color: white; background-color: black; display: inline-block;\">(max_idx)</label>\n",
       "\t\t<label id=\"lblKeep\" style=\"color: white; background-color: black; display: inline-block; text-align:right; width: 140px;\">\n",
       "\t\t\tKeep rays<input id=\"cbxKeep\" type=\"checkbox\">\n",
       "\t\t</label>\n",
       "\t\t<label id=\"lblScatterCubes\" style=\"color: white; background-color: black; display: inline-block; text-align:right; width: 140px;\">\n",
       "\t\t\tScatter Markers<input id=\"cbxScattCub\" type=\"checkbox\">\n",
       "\t\t</label>\n",
       "\t\t<label id=\"lblView\" style=\"color: white; background-color: black; display: inline-block; text-align:right; width: 120px;\">Reset view:</label>\n",
       "\t\t<button id=\"btnHome\", onclick=\"handleViewHome();\" style=\"width: 60px;\">Home</button>\n",
       "\t\t<button id=\"btnSide\", onclick=\"handleViewSide();\" style=\"width: 60px;\">Side</button>\n",
       "\t\t<button id=\"btnTop\", onclick=\"handleViewTop();\" style=\"width: 60px;\">Top</button>\n",
       "\t\t<label id=\"lblView\" style=\"color: white; background-color: black; display: inline-block; text-align:right; width: 120px;\">Show BB</label>\n",
       "\t\t<input id=\"cbxBoundingbox\" type=\"checkbox\">\n",
       "\t</div>\n",
       "\t<div id=\"3dcanvas\"></div>\n",
       "\n",
       "\t<script>\n",
       "\t\t// gui synchronization class\n",
       "\t\t//\n",
       "\t\tvar UpdateGui = function()\n",
       "\t\t{\n",
       "\t\t\tthis.vm_version = -1;\n",
       "\t\t\tthis.viewmodel = viewmodel;\n",
       "\t\t}\n",
       "\t\tUpdateGui.prototype.update = function()\n",
       "\t\t{\n",
       "\t\t\t// return if viewmodel is constant\n",
       "\t\t\tif (this.vm_version == this.viewmodel.getUpdateVersion()) { return; }\n",
       "\n",
       "\t\t\tthis.vm_version = this.viewmodel.getUpdateVersion();\n",
       "\n",
       "\t\t\t// update playback mode\n",
       "\t\t\tvar pb = this.viewmodel.getPlayBack();\n",
       "\t\t\tif (pb == PlayBack.RUN)\n",
       "\t\t\t{\n",
       "\t\t\t\tbtn = document.getElementById(\"btnPlayPause\");\n",
       "\t\t\t\tbtn.innerHTML = \"Pause\";\n",
       "\t\t\t}\n",
       "\t\t\tif (pb == PlayBack.PAUSE)\n",
       "\t\t\t{\n",
       "\t\t\t\tbtn = document.getElementById(\"btnPlayPause\");\n",
       "\t\t\t\tbtn.innerHTML = \"Play\";\n",
       "\t\t\t}\n",
       "\t\t\t// update ray index\n",
       "\t\t\tlbl = document.getElementById(\"lblRayIdx\");\n",
       "\t\t\tlbl.innerHTML = this.viewmodel.getRayIdx();\n",
       "\n",
       "\t\t\t// update keep ckeckbox\n",
       "\t\t\tcbxKeep = document.getElementById(\"cbxKeep\");\n",
       "\t\t\tvar dm = this.viewmodel.getDisplayMode();\n",
       "\t\t\tif (dm == DisplayMode.SINGLE)\n",
       "\t\t\t{\n",
       "\t\t\t\tcbxKeep.checked = false;\n",
       "\t\t\t}\n",
       "\t\t\telse\n",
       "\t\t\t{\n",
       "\t\t\t\tcbxKeep.checked = true;\n",
       "\t\t\t}\n",
       "\n",
       "\t\t\t// update show/hide scatter cubes\n",
       "\t\t\tcbxScattCub = document.getElementById(\"cbxScattCub\");\n",
       "\t\t\tcbxScattCub.checked = this.viewmodel.getShowScatterCubes();\n",
       "\n",
       "\t\t\t// update bounding box checkbox\n",
       "\t\t\tcbxBoundingbox = document.getElementById(\"cbxBoundingbox\");\n",
       "\t\t\tcbxBoundingbox.checked = this.viewmodel.getShowBoundingBox();\n",
       "\t\t}\n",
       "\t\tvar upd = new UpdateGui();\n",
       "\n",
       "\t\t// set up static ui\n",
       "\t\tlblInstrInfo = document.getElementById(\"lblInstrInfo\");\n",
       "\t\tlblInstrInfo.innerHTML = MCDATA_instrdata[\"cmd\"];\n",
       "\t\tlblMaxRayIdx = document.getElementById(\"lblMaxRayIdx\");\n",
       "\t\tlblMaxRayIdx.innerHTML = '/ ' + (MCDATA_particledata[\"numrays\"] - 1);\n",
       "\n",
       "\t\t// set keep checkbox event handler\n",
       "\t\tcbxKeep = document.getElementById(\"cbxKeep\");\n",
       "\t\tcbxKeep.addEventListener(\"change\", function () { handleKeepChanged(cbxKeep.checked) });\n",
       "\n",
       "\t\t// set show bounding box event handler\n",
       "\t\tcbxBoundingbox = document.getElementById(\"cbxBoundingbox\");\n",
       "\t\tcbxBoundingbox.addEventListener(\"change\", function () { handleShowBBChanged(cbxBoundingbox.checked) });\n",
       "\n",
       "\t\t// set show bounding box event handler\n",
       "\t\tcbxScattCub = document.getElementById(\"cbxScattCub\");\n",
       "\t\tcbxScattCub.addEventListener(\"change\", function () { handleShowScatterCubesChanged(cbxScattCub.checked) });\n",
       "\n",
       "\t\t// call the mcdisplay app!\n",
       "\t\tcontroller.setUpdateGuiFunc(upd.update);\n",
       "\t\tcontroller.run();\n",
       "    </script>\n",
       "</body>\n",
       "</html>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import os\n",
    "os.chdir(\"first_instrument_20220121_144434\")\n",
    "HTML(filename=\"index.html\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "configured-playing",
   "metadata": {},
   "outputs": [],
   "source": [
    "from IPython.display import IFrame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "worldwide-novel",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['index.html',\n",
       " 'three.min.js',\n",
       " 'dat.gui.min.js',\n",
       " 'jquery.min.js',\n",
       " '_particles.js',\n",
       " '_instr.js',\n",
       " 'OrbitControls.js',\n",
       " '_mcdisplay.js',\n",
       " 'Lut.js']"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.listdir()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "eligible-anchor",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <iframe\n",
       "            width=\"950\"\n",
       "            height=\"700\"\n",
       "            src=\"first_instrument_20220121_144434/index.html?scrolling=no\"\n",
       "            frameborder=\"0\"\n",
       "            allowfullscreen\n",
       "        ></iframe>\n",
       "        "
      ],
      "text/plain": [
       "<IPython.lib.display.IFrame at 0x7febc0725a30>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "IFrame(src=\"first_instrument_20220121_144434/index.html\", width=950, height=700, scrolling=\"no\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "laughing-strength",
   "metadata": {},
   "outputs": [],
   "source": [
    "from IPython import display"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "great-mediterranean",
   "metadata": {},
   "outputs": [],
   "source": [
    "os.chdir(\"..\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "streaming-chrome",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['installation.ipynb',\n",
       " 'first_instrument_data_3',\n",
       " 'first_instrument_data_4',\n",
       " 'first_instrument_data_12',\n",
       " 'first_instrument_data_13',\n",
       " 'first_instrument_data_5',\n",
       " 'first_instrument_data_2',\n",
       " 'first_instrument_data_14',\n",
       " 'first_instrument_data',\n",
       " 'overview.ipynb',\n",
       " 'first_instrument_mcdisplay_2',\n",
       " 'first_instrument_mcdisplay_5',\n",
       " 'first_instrument_mcdisplay_4',\n",
       " 'first_instrument_mcdisplay_3',\n",
       " 'first_instrument_mcdisplay',\n",
       " 'quick_start.ipynb',\n",
       " 'first_instrument.out',\n",
       " 'first_instrument.c',\n",
       " 'first_instrument_data_9',\n",
       " 'first_instrument_data_7',\n",
       " 'first_instrument_data_11',\n",
       " 'first_instrument_data_0',\n",
       " 'first_instrument.out.dSYM',\n",
       " 'first_instrument_data_1',\n",
       " 'first_instrument_data_10',\n",
       " 'first_instrument_data_6',\n",
       " 'first_instrument_data_8',\n",
       " '.ipynb_checkpoints',\n",
       " 'quick_start-Copy1.ipynb',\n",
       " 'first_instrument_mcdisplay_8',\n",
       " 'first_instrument_mcdisplay_6',\n",
       " 'first_instrument_mcdisplay_1',\n",
       " 'first_instrument_20220121_144434',\n",
       " 'first_instrument_mcdisplay_0',\n",
       " 'first_instrument_mcdisplay_7',\n",
       " 'first_instrument.instr']"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.listdir()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "italic-transcription",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on class IFrame in module IPython.lib.display:\n",
      "\n",
      "class IFrame(builtins.object)\n",
      " |  IFrame(src, width, height, **kwargs)\n",
      " |  \n",
      " |  Generic class to embed an iframe in an IPython notebook\n",
      " |  \n",
      " |  Methods defined here:\n",
      " |  \n",
      " |  __init__(self, src, width, height, **kwargs)\n",
      " |      Initialize self.  See help(type(self)) for accurate signature.\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Data descriptors defined here:\n",
      " |  \n",
      " |  __dict__\n",
      " |      dictionary for instance variables (if defined)\n",
      " |  \n",
      " |  __weakref__\n",
      " |      list of weak references to the object (if defined)\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Data and other attributes defined here:\n",
      " |  \n",
      " |  iframe = '\\n        <iframe\\n            width=\"{width}\"\\n   ...      ...\n",
      "\n"
     ]
    }
   ],
   "source": [
    "help(IFrame)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "genuine-guest",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'ZMQInteractiveShell'"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "get_ipython().__class__.__name__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "judicial-course",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<script>\n",
       "IPython.notebook.kernel.execute(\"cell_width=\"+($( \".cell\").width()))\n",
       "</script>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from IPython.display import display, HTML\n",
    "js = \"\"\"<script>\n",
    "IPython.notebook.kernel.execute(\"cell_width=\"+($( \".cell\").width()))\n",
    "</script>\"\"\"\n",
    "display(HTML(js))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "capital-threshold",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'cell_width' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-33-e37111202c01>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcell_width\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'cell_width' is not defined"
     ]
    }
   ],
   "source": [
    "print(cell_width)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aggressive-reducing",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
